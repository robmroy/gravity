{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/hole.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","this","draw","move","launch","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","vx","vy","setLineDash","moveTo","lineTo","drawArrowBits","fillStyle","font","fillText","sqrt","toFixed","fill","cos","sin","ball","stopped","event","cursor","clientX","clientY","dx","dy","dVx","dVy","keyCode","src_ball","ax","ay","corners","logging","console","log","ballSpeedMultiplier","abs","planets","forEach","planet","dz2","dz","ballData","error","sticky","currentPlanet","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","Sticky_planet","density","floor","x1","y1","x2","y2","z","vDotNormal","new_vx","new_vy","hole","width","drawFlag","drawHole","level1","invSqrt","level2","src_game","canvas","setAttribute","getContext","levels","currentLevelNumber","initiateLevel","length","victoryMessage","level","requestAnimationFrame","animate","func","e","addEventListener","onkeydown","removeEventListener","setVelocityByArrowKeys","delta","moveObjects","checkRectangle","restartLevel","time","checkForWin","timeDelta","lastTime","step","height","fillRect"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const dottedArc = function(ctx, x, y, radius, theta0, theta1, color){\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2* Math.ceil(.5*(theta/a - 1)) + 1;\r\n    let dTheta = theta/numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i=0; i < numPieces; i++){ \r\n        ctx.beginPath();\r\n        if (i % 2 == 0){\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i*dTheta, theta0+(i+1)*dTheta \r\n                );\r\n                ctx.stroke();\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const vectorAngle = function(vector){\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x==0){\r\n        return y > 0 ? Math.PI/2 : -Math.PI/2;\r\n    }\r\n    \r\n    return x > 0 ? Math.atan(y/x) : Math.PI + Math.atan(y/x);\r\n    \r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2){\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1)*(a2-a1) <= 0 ||  (b2 - b1)*(a2-b1) <= 0\r\n    || (b1 - a2) * (a1-a2) <=0 || (b1 - b2) * (a1-b2) <=0;\r\n}","import {dottedArc, vectorAngle} from './helper';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0,1], radius = 100,  color = \"white\"){\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw= this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy=0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = {x: null, y: null};\r\n      this.arrowAngle = this.normalAngle;\r\n  }\r\n\r\n  move(){\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n  }\r\n  draw(ctx ) {\r\n   // ctx.beginPath();\r\n   // ctx.strokeStyle = this.color;\r\n   // ctx.arc(\r\n   //   this.x, this.y, this.radius, 0,  Math.PI\r\n   // );\r\n   // ctx.stroke();\r\n   //  \r\n   dottedArc(ctx, this.x, this.y, this.radius, \r\n      this.normalAngle - Math.PI/2, this.normalAngle + Math.PI/2, this.color);\r\n   if (this.arrowTip.x !== null){\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.setLineDash([5,5]);\r\n     ctx.moveTo(this.x, this.y);\r\n     ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n     ctx.stroke();\r\n     this.drawArrowBits(ctx);\r\n     ctx.beginPath();\r\n        ctx.fillStyle = \"purple\"\r\n        ctx.font = `${21}px Arial`;\r\n        ctx.fillText(`Initial speed: ${Math.sqrt(this.launchVx **2 + this.launchVy **2).toFixed(2)}`, \r\n        `${0.5 * (this.x + this.arrowTip.x)}`,\r\n         `${0.5 * (this.y + this.arrowTip.y)}`);\r\n        ctx.fill();\r\n     \r\n   }\r\n}\r\n   drawArrowBits (ctx) {\r\n      let {x, y, arrowTip} = this;\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y -y] );\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta + 3*Math.PI/4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta - 3*Math.PI/4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n    launch(){\r\n       if (this.arrowTip.x === null){\r\n          return false;\r\n       }\r\n       this.game.ball.stopped = false;\r\n       this.game.ball.vx = this.launchVx;\r\n       this.game.ball.vy = this.launchVy;\r\n       return true;\r\n    }\r\n\r\n    setVelocity(event){\r\n\r\n      const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n      const dx = cursor.x - this.x;\r\n      const dy = cursor.y - this.y;\r\n      if (\r\n         dx**2 + dy**2 <= this.radius ** 2 &&\r\n          dx * this.normal[0] + dy * this.normal[1] >= 0\r\n          ) {\r\n             this.arrowTip.x = cursor.x;\r\n             this.arrowTip.y = cursor.y;\r\n\r\n            this.launchVx = dx/ 4;\r\n            this.launchVy = dy/ 4;\r\n           \r\n            this.arrowAngle = vectorAngle([dx, dy]);\r\n            \r\n         }   \r\n         else {this.arrowTip.x = null;}\r\n    }\r\n    setVelocityByArrowKeys(event){\r\n       const dVx = .1 * Math.cos(this.arrowAngle);\r\n       const dVy = .1 * Math.sin(this.arrowAngle);\r\n       if (event.keyCode === 40){\r\n          this.launchVx -= dVx;        \r\n          this.launchVy -= dVy;        \r\n          this.arrowTip.x -= 4 * dVx;\r\n          this.arrowTip.y -= 4 * dVy;\r\n       }\r\n       if (event.keyCode === 38){\r\n          this.launchVx += dVx;\r\n          this.launchVy += dVy;\r\n          this.arrowTip.x += 4 * dVx;\r\n          this.arrowTip.y += 4 * dVy;\r\n\r\n       }\r\n    }\r\n   }\r\n\r\n\r\n   export default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, color = \"white\", vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        // this.logging = true;\r\n    }\r\n    \r\n    checkRectangle(corners){\r\n        const {x, y} = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    move(){\r\n        if(this.logging){\r\n            console.log(`ballx is ${this.x}`);\r\n            console.log(`bally is ${this.y}`);\r\n        }\r\n        \r\n\r\n        if (!this.stopped){\r\n            this.x += this.game.ballSpeedMultiplier*this.vx;\r\n            this.y += this.game.ballSpeedMultiplier* this.vy;\r\n            this.vx += this.ax;\r\n            this.vy +=this.ay;\r\n            \r\n\r\n            if (Math.abs(this.vx) + Math.abs(this.vy) < 0.4\r\n            && Math.abs(this.ax) + Math.abs(this.ay) <0.1){\r\n                this.stopped = true;}\r\n            this.ax = 0;\r\n            this.ay = 0;\r\n            \r\n            this.game.planets.forEach(planet => {\r\n                const {dx, dy, dz2, dz, normal} = planet.ballData();\r\n                if (dz <=  this.radius + planet.radius){\r\n                    let error = this.radius + planet.radius - dz;\r\n                    this.x += error * normal[0];\r\n                    this.y += error * normal[1];\r\n                    this.ax = 0;\r\n                    this.ay = 0;\r\n                  if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy)<1 ){\r\n                      this.stopped = true;\r\n                    this.game.currentPlanet = planet;\r\n                    this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal);\r\n                    this.game.setupLaunchPad();\r\n                }\r\n                  else{planet.bounce(normal);}\r\n                    \r\n                }\r\n                else{\r\n                this.ax -= (1/dz2)*planet.mass * dx/dz * .2;\r\n                this.ay -= (1/dz2)*planet.mass * dy/dz * .2;\r\n                } \r\n        });\r\n        this.game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()){\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n    };\r\n    \r\n    }\r\n    draw(ctx ) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.x, this.y, this.radius, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n    constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.density = density || 1;\r\n        this.mass = this.density * this.radius**3;\r\n        this.sticky = true;\r\n    }\r\n\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    ballData(){\r\n      const ball = this.game.ball;\r\n      const dx = ball.x - this.x;\r\n      const dy = ball.y - this.y;\r\n      const dz2 = ((dx)**2 + (dy)**2);\r\n      const dz = Math.sqrt(dz2);\r\n      const normal = [dx/dz, dy/dz];\r\n      return {dx, dy, dz2, dz, normal}\r\n  }\r\n\r\n    draw(ctx ) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.x, this.y, this.radius, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.font = `${Math.floor(.9 * this.radius)}px Arial`;\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `${14}px Arial`;\r\n        ctx.fillText(`Escape vel. approx. ${(this.radius * this.density **.45 *.504 ).toFixed(2)}`, \r\n        `${this.x +  this.radius + 2}`,\r\n         `${this.y + .5 * this.radius}`);\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default StickyPlanet;","import {intervalsIntersect} from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\"){\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1-y2)**2 + (x2 - x1)**2)\r\n        this.normal = [(y1 - y2)/z, (x2- x1)/z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n    }\r\n    bounce(){\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n    checkForBall(){\r\n        \r\n        let ball = this.game.ball;\r\n        ball.logging = false;\r\n        let {x1, x2, y1, y2} = this;\r\n        let normal = [y1-y2, x2-x1]\r\n        let {x, y, radius, vx, vy} = ball;\r\n        // if (x - radius > Math.max(x1, x2) || x + radius < Math.min(x1, x2)){\r\n        //     return false;\r\n        // }\r\n        // if (y - radius > Math.max(y1, y2) || y + radius < Math.min(y1, y2)){\r\n        //     return false;\r\n        // }\r\n        // let d = ((y2-y1)*x - (x2-x1)*y+x2*y1-y2*x1)/Math.sqrt((y2-y1)**2 + (x2-x1)**2);\r\n        // let result = -1.5*radius <= d && 1.5*radius >= d;\r\n        // if (result) {\r\n        // return result;\r\n        // }\r\n        let perpComponent = normal[0] * (x - x1) + normal[1]*(y-y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1]*(y+vy-y1);\r\n        return perpComponent * nextPerpComponent <= 0 \r\n        && intervalsIntersect([x, x+vx], [x1, x2]) \r\n        && intervalsIntersect([y, y+vy], [y1, y2]);\r\n    }\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n    draw(ctx ) {\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x1, this.y1);\r\n        ctx.lineTo(this.x2, this.y2);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n      };\r\n}\r\n\r\nexport default Obstacle;","import {intervalsIntersect} from './helper';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0,1], width = 100){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag= this.drawFlag.bind(this);\r\n        this.drawHole= this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n \r\n   move(){\r\n       this.x += this.vx;\r\n       this.y += this.vy;\r\n   }\r\n\r\n   drawFlag(ctx ) {\r\n       let x = this.x;\r\n       let y = this.y;\r\n       ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"gold\";\r\n      ctx.moveTo(x, y);\r\n      ctx.lineTo(x, y - 50)\r\n       ctx.stroke();\r\n       ctx.fillStyle = \"red\";\r\n       ctx.moveTo(x, y-50);\r\n       ctx.lineTo(x,y-70);\r\n       ctx.lineTo(x+ 25, y-60);\r\n       ctx.lineTo(x, y-50);\r\n       ctx.fill();\r\n     }\r\n     drawHole(ctx) {\r\n         let {x, y, width} = this;\r\n         let ball = this.game.ball;\r\n             ctx.beginPath();\r\n             ctx.strokeStyle = \"purple\";\r\n             ctx.moveTo(x - width/2, y);\r\n             ctx.lineTo(x + width/2, y);\r\n             ctx.stroke();\r\n             ctx.beginPath();\r\n             ctx.fillStyle = \"black\";\r\n             ctx.moveTo(x + width/2, y);\r\n             ctx.lineTo(x + width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y );\r\n             ctx.fill();\r\n         \r\n\r\n        }\r\n        checkForWin(){\r\n            let {x, y, width, normal} = this;\r\n            let ball = this.game.ball;\r\n            // let result = ball.y -ball.radius> y \r\n            // && ball.y-2*ball.radius < y\r\n            // && Math.abs(ball.x - x) < width/2\r\n            // && ball.vy >0;\r\n            \r\n            // return result;\r\n\r\n            let perpComponent = normal[0] * (ball.x - x) + normal[1]*(ball.y-y);\r\n            let nextPerpComponent = normal[0] * (ball.x + ball.vx - x) + normal[1]*(ball.y+ball.vy-y);\r\n            return perpComponent * nextPerpComponent <= 0 \r\n            && intervalsIntersect([ball.x, ball.x+ball.vx], [x - 0.5 * width* normal[1], x+ 0.5* width * normal[1]]) \r\n            && intervalsIntersect([ball.y, ball.y+ball.vy], [y - 0.5 * width* normal[0], y + 0.5 * width * normal[0]]);\r\n        }\r\n \r\n    \r\n     \r\n    }\r\n \r\n    export default Hole;\r\n ","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level1 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [1200, 900]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 490, 20, \"orange\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 670, 450,  [0,1], 100);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 680, 420),\r\n            new Obstacle(game, 360, 150, 710, 410)\r\n        ]\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 300, 100);\r\n        this.currentPlanet = new StickyPlanet(game, 300, 70, 25, \"#27753a\", .4);\r\n        this.corners = [[-200, -200], [1200, 900]];\r\n        this.launchPad = new LaunchPad(game, 300, 100);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 520, 250, 30, \"orange\"),\r\n            new StickyPlanet(game, 580, 450, 30, \"orange\"),\r\n\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 700, 500);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 600, 40, 850, 300)\r\n        ]\r\n        }\r\n}\r\n\r\nexport default Level2;","import Ball from './ball';\r\nimport LaunchPad from './launchpad';\r\nimport StickyPlanet from './Sticky_planet';\r\nimport Obstacle from './obstacle';\r\nimport BouncyPlanet from './bouncy_planet';\r\nimport Hole from './hole';\r\nimport Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.levels = [null, Level1, Level2];\r\n        this.currentLevelNumber = 0;\r\n        this.ballSpeedMultiplier=1;\r\n       \r\n        // this.ball = new Ball(this, 300, 100);\r\n        // this.currentPlanet = new StickyPlanet(this, 300, 70, 25, \"#27753a\", .4);\r\n\r\n        // this.launchPad = new LaunchPad(this, 300, 100);\r\n        // this.planets = [\r\n        //     this.currentPlanet,\r\n        //     new StickyPlanet(this, 300, 400, 35), \r\n        //     new StickyPlanet(this, 520, 250, 30, \"orange\"),\r\n        //     new StickyPlanet(this, 620, 450, 30, \"orange\"),\r\n\r\n            \r\n        // ]\r\n        // this.hole = new Hole(this, 700, 600);\r\n        // this.obstacles=[];\r\n        // this.obstacles = [\r\n        //     new Obstacle(this, 90, 0, 90, 900)   ,\r\n        //     new Obstacle(this, 600, 40, 850, 300)\r\n        // ];\r\n        \r\n\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n    }\r\n\r\n    initiateLevel() {\r\n\r\n        this.currentLevelNumber += 1;\r\n        if (this.currentLevelNumber >= this.levels.length){\r\n            this.ball.stopped = true;\r\n            return this.victoryMessage();\r\n        }\r\n        const level = new this.levels[this.currentLevelNumber](this);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets=level.planets;\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles;\r\n        this.corners = level.corners;\r\n        this.setupLaunchPad();\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    victoryMessage(){\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!', \r\n       400, 400);\r\n        ctx.fill();\r\n    }\r\n        \r\n    setupLaunchPad(){\r\n        let func = e => this.launchPad.setVelocity(e);\r\n        let game = this;\r\n        this.canvas.addEventListener(\"mousemove\", func, false);\r\n        let aFunc = e => {\r\n            game.canvas.removeEventListener('mousemove', func, false);\r\n            game.launchPad.setVelocityByArrowKeys(e);\r\n            console.log(game);\r\n        }\r\n\r\n        // this.canvas.addEventListener(\"keydown\", e => aFunc(e));\r\n        this.canvas.onkeydown = aFunc;\r\n        this.canvas.addEventListener(\r\n            \"click\",\r\n            e => {if (this.launchPad.launch()){\r\n                this.canvas.removeEventListener('mousemove', func);\r\n            }\r\n            })\r\n    }\r\n    \r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n    }\r\n\r\n    moveObjects() {\r\n        this.ball.move();\r\n        if (!this.ball.checkRectangle(this.corners)){\r\n            this.restartLevel();\r\n        }\r\n    }\r\n    animate(time) {\r\n        if (this.hole.checkForWin()){\r\n            this.ball.stopped = true;\r\n            return this.initiateLevel();\r\n        }\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        this.draw();\r\n        this.lastTime = time;\r\n\r\n        // every call to animate requests causes another call to animate\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n    draw() {\r\n        let ctx=this.ctx;\r\n        ctx.width = 1200;\r\n        ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, 1000, 600);\r\n        this.launchPad.draw(ctx);\r\n        this.hole.drawFlag(ctx);\r\n        this.ball.draw(ctx);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx));\r\n        this.hole.drawHole(ctx);\r\n        this.planets.forEach(planet => planet.draw(ctx));\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.initiateLevel();\r\n});\r\n"],"sourceRoot":""}