{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/fast-random/index.js","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/hole.js","webpack:///./src/start_button.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/timedMessage.js","webpack:///./src/viewport.js","webpack:///./src/stars.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","seed","_seed","_nextInt","nextInt","nextFloat","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","vectorLength","sqrt","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","this","draw","move","launch","arrowVector","updatePolar","updateArrowTip","updateLaunchVelocity","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","arrowLength","vx","vy","vp","displayPos","x1","y1","cos","sin","currentPlanet","hideText","setLineDash","moveTo","lineTo","drawArrowBits","textX","textY","fillStyle","font","fillText","toFixed","fill","textPos","console","log","ball","stopped","event","cursor","clientX","clientY","dx","dy","callback","keyCode","includes","src_ball","playSpeed","ax","ay","prevx","prevy","drawX","drawY","interpolateX","interpolateY","fractional","num","residue","frameCount","corners","logging","abs","stop","planets","forEach","planet","dz2","dz","ballData","error","sticky","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","setAuxPositions","Sticky_planet","density","floor","x2","y2","z","vDotNormal","new_vx","new_vy","viewport","hole","width","drawFlag","drawHole","start_button_error","start_button","clickHandler","canvas","addEventListener","visible","removeEventListener","level1","invSqrt","startButton","viewportMovementStartX","viewportMovementStartY","level2","timedMessage","text","duration","zoom","setMovementStart","moveWithBall","movementStartX","movementStartY","ballX","ballY","ballOvershoot","catchupX","min","catchupY","pojo","src_stars","level","topLeft","bottomRight","blocks","starsPerBlock","xInThousands","yInThousands","frandom","fast_random_default","stars","Array","length","src_game","setAttribute","getContext","levels","currentLevelNumber","initiateLevel","setPlaySpeed","playSpeedMessage","restartLevel","victoryMessage","generateBlock","requestAnimationFrame","animate","setVelocityWithMouse","e","launchBallWithMouse","keyDownHandler","setVelocityByArrowKeys","delta","moveObjects","checkRectangle","time","checkForWin","timeDelta","lastTime","step","height","fillRect","j","getBlock","drawBlock"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function random(seed) {\n\tfunction _seed(s) {\n\t\tif ((seed = (s|0) % 2147483647) <= 0) {\n\t\t\tseed += 2147483646;\n\t\t}\n\t}\n\n\tfunction _nextInt() {\n\t\treturn seed = seed * 48271 % 2147483647;\n\t}\n\n\tfunction _nextFloat() {\n\t\treturn (_nextInt() - 1) / 2147483646;\n\t}\n\n\t_seed(seed);\n\n\treturn {\n\t\tseed: _seed,\n\t\tnextInt: _nextInt,\n\t\tnextFloat: _nextFloat\n\t};\n}\n\nmodule.exports = random;\n","export const dottedArc = function(ctx, x, y, radius, theta0, theta1, color){\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2* Math.ceil(.5*(theta/a - 1)) + 1;\r\n    let dTheta = theta/numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i=0; i < numPieces; i++){ \r\n        ctx.beginPath();\r\n        if (i % 2 == 0){\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i*dTheta, theta0+(i+1)*dTheta \r\n                );\r\n                ctx.stroke();\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const vectorAngle = function(vector){\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x==0){\r\n        return y > 0 ? Math.PI/2 : -Math.PI/2;\r\n    }\r\n    \r\n    return x > 0 ? Math.atan(y/x) : Math.PI + Math.atan(y/x);\r\n    \r\n}\r\n\r\nexport const vectorLength = function(vector){\r\n    return Math.sqrt(vector[0] ** 2 + vector[1] ** 2);\r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2){\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1)*(a2-a1) <= 0 ||  (b2 - b1)*(a2-b1) <= 0\r\n    || (b1 - a2) * (a1-a2) <=0 || (b1 - b2) * (a1-b2) <=0;\r\n}\r\n","import {dottedArc, vectorAngle, vectorLength} from './helper';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0,1], radius = 100,  color = \"white\"){\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw= this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.arrowVector = this.arrowVector.bind(this);\r\n      this.updatePolar = this.updatePolar.bind(this);\r\n      this.updateArrowTip = this.updateArrowTip.bind(this);\r\n      this.updateLaunchVelocity = this.updateLaunchVelocity.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy=0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = {x: null, y: null};\r\n      this.arrowAngle = this.normalAngle;\r\n      this.arrowLength = 60;\r\n  }\r\n\r\n  move(){\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n  }\r\n\r\n  vpX(){\r\n    return this.game.vp.displayPos(this).x;\r\n   }\r\n   vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n   }\r\n\r\n  arrowVector(){\r\n     const vp = this.game.vp;\r\n     return [this.arrowTip.x-this.x + vp.x1, this.arrowTip.y-this.y + vp.y1];\r\n  }\r\n  updatePolar(){\r\n   this.arrowLength = vectorLength(this.arrowVector());\r\n   this.arrowAngle = vectorAngle(this.arrowVector());\r\n  }\r\n  updateArrowTip(){\r\n     let vp = this.game.vp;\r\n     this.arrowTip.x = this.x -vp.x1 + this.arrowLength*Math.cos(this.arrowAngle);\r\n     this.arrowTip.y = this.y - vp.y1 + this.arrowLength*Math.sin(this.arrowAngle);\r\n  }\r\n  updateLaunchVelocity(){\r\n     this.launchVx = this.arrowVector()[0]/4;\r\n     this.launchVy = this.arrowVector()[1]/4;\r\n  }\r\n  draw(ctx, x = this.x, y = this.y, r = this.radius ) {\r\n   // ctx.beginPath();\r\n   // ctx.strokeStyle = this.color;\r\n   // ctx.arc(\r\n   //   this.x, this.y, this.radius, 0,  Math.PI\r\n   // );\r\n   // ctx.stroke();\r\n   //  \r\n   \r\n   dottedArc(ctx, x, y, r, \r\n      this.normalAngle - Math.PI/2, this.normalAngle + Math.PI/2, this.color);\r\n      let currentPlanet = this.game.currentPlanet;\r\n      if(this.arrowTip.x === null){currentPlanet.hideText = false;}\r\n   if (this.arrowTip.x !== null){\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.setLineDash([5,5]);\r\n     ctx.moveTo(x, y);\r\n     ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n     ctx.stroke();\r\n     this.drawArrowBits(ctx);\r\n     ctx.beginPath();\r\n      let textX = 0.5 * (x + this.arrowTip.x);\r\n      let textY = 0.5 * (y + this.arrowTip.y);\r\n        ctx.fillStyle = \"purple\"\r\n        ctx.font = `${21}px Arial`;\r\n        ctx.fillText(`Initial speed: ${(this.arrowLength/4).toFixed(2)}`, \r\n        `${textX}`,\r\n         `${textY}`);\r\n        ctx.fill();\r\n        \r\n        if (textX  >=currentPlanet.textPos.x -150  && \r\n           textY >= currentPlanet.textPos.y - 7 &&\r\n         textY  <= currentPlanet.textPos.y + 4){\r\n            currentPlanet.hideText = true;\r\n            console.log(`textX: ${textX} vs ${currentPlanet.textPos.x}`);\r\n            console.log(`textY: ${textY} vs ${currentPlanet.textPos.y}`)\r\n         }\r\n         else { currentPlanet.hideText = false;}\r\n     \r\n   }\r\n}\r\n   drawArrowBits(ctx) {\r\n      let {x, y, arrowTip, game} = this;\r\n       x -= game.vp.x1;\r\n      y-= game.vp.y1;\r\n\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y -y] );\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta + 3*Math.PI/4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta - 3*Math.PI/4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n    launch(){\r\n       if (this.arrowTip.x === null){\r\n          return false;\r\n       }\r\n       this.game.ball.stopped = false;\r\n       this.game.ball.vx = this.launchVx;\r\n       this.game.ball.vy = this.launchVy;\r\n       return true;\r\n    }\r\n\r\n    setVelocity(event){\r\n      const vp = this.game.vp;\r\n      const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n      const dx = cursor.x - this.x +vp.x1;\r\n      const dy = cursor.y - this.y + vp.y1;\r\n      if (\r\n         dx**2 + dy**2 <= this.radius ** 2 &&\r\n          dx * this.normal[0] + dy * this.normal[1] >= 0\r\n          ) {\r\n             this.arrowTip.x = cursor.x;\r\n             this.arrowTip.y = cursor.y;\r\n\r\n            this.updateLaunchVelocity();\r\n           \r\n            this.updatePolar();\r\n            \r\n         }   \r\n         else {this.arrowTip.x = null;}\r\n    }\r\n    setVelocityByArrowKeys(event, callback){\r\n       const dVx = .1 * Math.cos(this.arrowAngle);\r\n       const dVy = .1 * Math.sin(this.arrowAngle);\r\n\r\n       if (event.keyCode === 40){\r\n         this.arrowLength -= .5;\r\n       }\r\n       if (event.keyCode === 38){\r\n         this.arrowLength += .5;\r\n       }\r\n       if (event.keyCode === 37){\r\n          this.arrowAngle -= .02;\r\n       }\r\n       if (event.keyCode === 39){\r\n          this.arrowAngle += .02;\r\n      }\r\n      if ([32,13].includes(event.keyCode)){\r\n         if (this.launch()){\r\n            callback();\r\n         }\r\n       }\r\n       this.updateArrowTip();\r\n       this.updateLaunchVelocity();\r\n       \r\n    }\r\n   }\r\n\r\n   export default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, playSpeed = 1, color = \"white\", vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        this.prevx =x ;\r\n        this.prevy = y;\r\n        this.drawX = x;\r\n        this.drawY = y;\r\n        this.interpolateX = x;\r\n        this.interpolateY = y;\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n\r\n    setAuxPositions(){\r\n        const playSpeed = this.game.playSpeed;\r\n        const vp = this.game.vp;\r\n        if (playSpeed.fractional && playSpeed.num > 1){\r\n            const num = playSpeed.num;\r\n            const residue = this.frameCount % num;\r\n            this.interpolateX =   (residue/num) * this.x + (1 - residue/num) * this.prevx;\r\n            this.interpolateY = (residue/num) * this.y + (1 - residue/num) * this.prevy; \r\n        }\r\n        else {\r\n            this.interpolateX = this.prevx;\r\n            this.interpolateY = this.prevy ;\r\n        }\r\n        this.drawX = this.interpolateX - vp.x1;\r\n         this.drawY = this.interpolateY - vp.y1;\r\n    }\r\n    \r\n    checkRectangle(corners){\r\n        const {x, y} = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    // setPlaySpeed(event){\r\n    //     if (event.keyCode === 70 && this.playSpeed < 4 ){\r\n    //         this.playSpeed += .2;\r\n    //     }\r\n    //     if (event.keyCode === 83 && this.playSpeed >= .4) {\r\n    //         this.playSpeed -= .2;\r\n    //     } \r\n    //     this.accelCorrection = this.playSpeed ** (-.88);\r\n    // }\r\n    stop(){\r\n        this.stopped = true;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n    }\r\n    move(){\r\n        if(this.logging){\r\n            console.log(`ballx is ${this.x}`);\r\n            console.log(`bally is ${this.y}`);\r\n        }\r\n\r\n        this.prevx = this.x;\r\n        this.prevy = this.y;\r\n        if (this.stopped) return;\r\n        // this.x += this.playSpeed*this.vx;\r\n        // this.y += this.playSpeed* this.vy;\r\n        // this.vx += this.accelCorrection * this.playSpeed**2 * this.ax;\r\n        // this.vy += this.accelCorrection * this.playSpeed**2 * this.ay;\r\n        this.x += this.vx;\r\n        this.y +=  this.vy;\r\n        this.vx +=  this.ax;\r\n        this.vy +=  this.ay;\r\n        \r\n        if (Math.abs(this.vx) + Math.abs(this.vy) < 0.4\r\n        && Math.abs(this.ax) + Math.abs(this.ay) <0.1){\r\n            this.stop();}\r\n\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n            \r\n        this.game.planets.forEach(planet => {\r\n            const {dx, dy, dz2, dz, normal} = planet.ballData();\r\n            if (dz <=  this.radius + planet.radius){\r\n                let error = this.radius + planet.radius - dz;\r\n                this.x += error * normal[0];\r\n                this.y += error * normal[1];\r\n                this.ax = 0;\r\n                this.ay = 0;\r\n                if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy)<1 ){\r\n                    this.stop();\r\n                this.game.currentPlanet = planet;\r\n                this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal);\r\n                this.game.setupLaunchPad();\r\n            }\r\n                else{planet.bounce(normal);}\r\n                \r\n            }\r\n            else{\r\n            this.ax -= (1/dz2)*planet.mass * dx/dz * .2;\r\n            this.ay -= (1/dz2)*planet.mass * dy/dz * .2;\r\n            } \r\n        });\r\n        this.game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()){\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n    \r\n    \r\n    }\r\n    draw(ctx, r = this.radius ) {\r\n        this.setAuxPositions();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.drawX, this.drawY, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n    constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.density = density || 1;\r\n        this.mass = this.density * this.radius**3;\r\n        this.sticky = true;\r\n        this.hideText = false;\r\n        this.textPos={x: x + radius + 2, y: y+ radius + .5};\r\n    }\r\n\r\n    vpX(){\r\n      return this.game.vp.displayPos(this).x;\r\n  }\r\n\r\n  vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n  }\r\n\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    ballData(){\r\n      const ball = this.game.ball;\r\n      const dx = ball.x - this.x;\r\n      const dy = ball.y - this.y;\r\n      const dz2 = ((dx)**2 + (dy)**2);\r\n      const dz = Math.sqrt(dz2);\r\n      const normal = [dx/dz, dy/dz];\r\n      return {dx, dy, dz2, dz, normal}\r\n  }\r\n\r\n    draw(ctx, x = this.x, y = this.y, r = this.radius ) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x, y, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n        ctx.fill();\r\n        if (!this.hideText){\r\n          ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `${14}px Arial`;\r\n        ctx.fillText(`Escape vel. approx. ${(this.radius * this.density **.45 *.504 ).toFixed(2)}`, \r\n        `${x +  r + 2}`,\r\n         `${y + .5 * r}`);\r\n        ctx.fill();\r\n      };\r\n    }\r\n}\r\n\r\nexport default StickyPlanet;","import {intervalsIntersect} from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\"){\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1-y2)**2 + (x2 - x1)**2)\r\n        this.normal = [(y1 - y2)/z, (x2- x1)/z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n    }\r\n    bounce(){\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n    checkForBall(){\r\n        \r\n        let ball = this.game.ball;\r\n        ball.logging = false;\r\n        let {x1, x2, y1, y2} = this;\r\n        let normal = [y1-y2, x2-x1]\r\n        let {x, y, radius, vx, vy} = ball;\r\n        // if (x - radius > Math.max(x1, x2) || x + radius < Math.min(x1, x2)){\r\n        //     return false;\r\n        // }\r\n        // if (y - radius > Math.max(y1, y2) || y + radius < Math.min(y1, y2)){\r\n        //     return false;\r\n        // }\r\n        // let d = ((y2-y1)*x - (x2-x1)*y+x2*y1-y2*x1)/Math.sqrt((y2-y1)**2 + (x2-x1)**2);\r\n        // let result = -1.5*radius <= d && 1.5*radius >= d;\r\n        // if (result) {\r\n        // return result;\r\n        // }\r\n        let perpComponent = normal[0] * (x - x1) + normal[1]*(y-y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1]*(y+vy-y1);\r\n        return perpComponent * nextPerpComponent <= 0 \r\n        && intervalsIntersect([x, x+vx], [x1, x2]) \r\n        && intervalsIntersect([y, y+vy], [y1, y2]);\r\n    }\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n    draw(ctx, viewport ) {\r\n        let {x1, y1} = viewport;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x1 - x1, this.y1 - y1);\r\n        ctx.lineTo(this.x2 - x1, this.y2 - y1);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n      };\r\n}\r\n\r\nexport default Obstacle;","import {intervalsIntersect} from './helper';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0,1], width = 100){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag= this.drawFlag.bind(this);\r\n        this.drawHole= this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n \r\n   move(){\r\n       this.x += this.vx;\r\n       this.y += this.vy;\r\n   }\r\n\r\n   drawFlag(ctx, x = this.x, y = this.y ) {\r\n       ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"gold\";\r\n      ctx.moveTo(x, y);\r\n      ctx.lineTo(x, y - 50)\r\n       ctx.stroke();\r\n       ctx.fillStyle = \"red\";\r\n       ctx.moveTo(x, y-50);\r\n       ctx.lineTo(x,y-70);\r\n       ctx.lineTo(x+ 25, y-60);\r\n       ctx.lineTo(x, y-50);\r\n       ctx.fill();\r\n     }\r\n     drawHole(ctx, x = this.x, y = this.y) {\r\n         let {width} = this;\r\n         let ball = this.game.ball;\r\n             ctx.beginPath();\r\n             ctx.strokeStyle = \"purple\";\r\n             ctx.moveTo(x - width/2, y);\r\n             ctx.lineTo(x + width/2, y);\r\n             ctx.stroke();\r\n             ctx.beginPath();\r\n             ctx.fillStyle = \"black\";\r\n             ctx.moveTo(x + width/2, y);\r\n             ctx.lineTo(x + width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y );\r\n             ctx.fill();\r\n         \r\n\r\n        }\r\n        checkForWin(){\r\n            let {x, y, width, normal} = this;\r\n            let ball = this.game.ball;\r\n            // let result = ball.y -ball.radius> y \r\n            // && ball.y-2*ball.radius < y\r\n            // && Math.abs(ball.x - x) < width/2\r\n            // && ball.vy >0;\r\n            \r\n            // return result;\r\n\r\n            let perpComponent = normal[0] * (ball.x - x) + normal[1]*(ball.y-y);\r\n            let nextPerpComponent = normal[0] * (ball.x + ball.vx - x) + normal[1]*(ball.y+ball.vy-y);\r\n            return perpComponent * nextPerpComponent <= 0 \r\n            && intervalsIntersect([ball.x, ball.x+ball.vx], [x - 0.5 * width* normal[1], x+ 0.5* width * normal[1]]) \r\n            && intervalsIntersect([ball.y, ball.y+ball.vy], [y - 0.5 * width* normal[0], y + 0.5 * width * normal[0]]);\r\n        }\r\n \r\n    \r\n     \r\n    }\r\n \r\n    export default Hole;\r\n ","const error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\nclass StartButton{\r\n    constructor(game, x, y){\r\n        this.game = game;\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        game.canvas.addEventListener(\"click\", this.clickHandler);\r\n        this.visible = true;\r\n        this.x =x;\r\n        this.y = y;\r\n    }\r\n    draw(ctx){\r\n        if(this.visible){\r\n            ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${25}px Arial`;\r\n        ctx.fillText(`Start`, \r\n       this.x, this.y);\r\n        ctx.fill();\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = \"white\";\r\n            ctx.moveTo(this.x - 20, this.y+10);\r\n            ctx.lineTo(this.x - 20, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y + 10 );\r\n            ctx.lineTo(this.x - 20, this.y + 10);\r\n            ctx.stroke();\r\n        }\r\n\r\n    }\r\n    clickHandler(event){\r\n        const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n        if (\r\n            cursor.x >= this.x -20 && cursor.x <= this.x + 75\r\n            && cursor.y >=this.y - 25 && cursor.y <= this.y + 10\r\n            ){\r\n                console.log(\"successful click\");\r\n                this.game.setupLaunchPad();\r\n                this.game.canvas.removeEventListener(\"click\", this.clickHandler, false);\r\n                this.visible = false;\r\n            }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default StartButton;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level1 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n        this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 490, 22, \"white\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 680, 435,  [0,1], 100);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 660, 420),\r\n            new Obstacle(game, 360, 150, 690, 410)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 300, 100);\r\n        this.currentPlanet = new StickyPlanet(game, 300, 70, 25, \"#27753a\", 1);\r\n        this.corners = [[-200, -200], [2400, 1900]];\r\n        this.launchPad = new LaunchPad(game, 300, 100);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 520, 250, 30, \"orange\"),\r\n            new StickyPlanet(game, 580, 450, 30, \"orange\"),\r\n\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 700, 500);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 600, 40, 850, 300)\r\n        ]\r\n        }\r\n}\r\n\r\nexport default Level2;","class TimedMessage{\r\n    constructor(text, duration = 300, font = '30px Arial', x = 400, y = 300) {\r\n        this.text = text;\r\n        this.duration = duration;\r\n        this.font = font;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    draw(ctx){\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = this.font;\r\n        ctx.fillText(this.text, \r\n        this.x,\r\n        this.y);\r\n        ctx.fill();\r\n    }\r\n}\r\n\r\nexport default TimedMessage;","class Viewport {\r\n    constructor(x1 = 0, y1 =0, x2 = 1200, y2 = 600, zoom =100){\r\n        this.x1 = x1;\r\n        this.y1= y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.zoom = zoom;\r\n        this.setMovementStart = this.setMovementStart.bind(this);\r\n        this.moveWithBall = this.moveWithBall.bind(this);\r\n    }\r\n    setMovementStart(x,y){\r\n        this.movementStartX = x;\r\n        this.movementStartY = y;\r\n    }\r\n    moveWithBall(ballX, ballY, ball){\r\n        let {x1, x2, y1, y2} = this;\r\n        let ballOvershoot = {x: ballX - .5*(x1+x2), y: ballY - .5 *(y1+y2)};\r\n        if (ballOvershoot.x  > 0 && ballX > this.movementStartX){\r\n            const catchupX = Math.min(ballOvershoot.x, 1.4 * ball.vx);\r\n            this.x1 += catchupX;\r\n            this.x2 += catchupX;\r\n        }\r\n        if (ballOvershoot.y  > 0 && ballY > this.movementStartY){\r\n            const catchupY = Math.min(ballOvershoot.y, 1.4 * ball.vy);\r\n            this.y1 += catchupY;\r\n            this.y2 += catchupY;\r\n        }\r\n    }\r\n\r\n    displayPos(pojo){\r\n        return {x: pojo.x - this.x1, y: pojo.y - this.y1 }\r\n    }\r\n}\r\n\r\nexport default Viewport;","import fastRandom from 'fast-random';\r\n\r\nclass Stars {\r\n    constructor(level){\r\n        this.topLeft = {x: level.corners[0]-600, y: level.corners[0]-300};\r\n        this.bottomRight = {x: level.corners[1]+600, y: level.corners[1]+300};\r\n        this.blocks = {};\r\n        this.starsPerBlock = 100;\r\n    }\r\n\r\n    generateBlock(xInThousands, yInThousands){\r\n        let x = xInThousands;\r\n        let y = yInThousands;\r\n        const seed = 1000*x + y;\r\n        const frandom = fastRandom(seed);\r\n        const stars = new Array(this.starsPerBlock);\r\n        for (let i=0; i< stars.length; i++){\r\n            stars[i] = [\r\n                1000*(x + frandom.nextFloat()), \r\n                1000*(y+frandom.nextFloat()), \r\n                .3 + .8 * (frandom.nextFloat())**9]\r\n        }\r\n        this.blocks[`${x}, ${y}`] = stars;\r\n    }\r\n\r\n    drawBlock(ctx, xInThousands, yInThousands, viewport){\r\n        let stars = this.blocks[`${xInThousands}, ${yInThousands}`];\r\n        ctx.fillStyle = \"white\";\r\n        for (let i=0; i< stars.length; i++){\r\n            let [x, y, r] = stars[i];\r\n            ctx.beginPath();\r\n            \r\n            ctx.arc(\r\n              x - viewport.x1, y - viewport.y1, r, 0, 2 * Math.PI, true\r\n            );\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    getBlock(x, y){\r\n        return this.blocks[`${x}, ${y}`];\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Stars;","import Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\nimport TimedMessage from './timedMessage';\r\nimport Viewport from './viewport';\r\nimport Stars from './stars';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.levels = [null, \r\n            Level1, \r\n            Level2];\r\n        this.currentLevelNumber = 0;\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n        this.playSpeed = {num: 1, fractional: false};\r\n        this.setPlaySpeed = this.setPlaySpeed.bind(this);\r\n        this.frameCount = 0;\r\n        this.playSpeedMessage = null;\r\n        this.vp = new Viewport();\r\n        this.restartLevel = this.restartLevel.bind(this);\r\n        // {topLeft: {x: 0, y: 0}, bottomRight: {x: 1200, y: 600}, zoom: 100}\r\n        \r\n        \r\n    }\r\n\r\n    initiateLevel() {\r\n        \r\n        this.currentLevelNumber += 1;\r\n        this.vp = new Viewport();\r\n        if (this.currentLevelNumber >= this.levels.length){\r\n            this.ball.stopped = true;\r\n            return this.victoryMessage();\r\n        }\r\n        const level = new this.levels[this.currentLevelNumber](this);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets=level.planets;\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles;\r\n        this.corners = level.corners;\r\n        this.startButton = level.startButton;\r\n        this.playSpeed = {num: 1, fractional: false};\r\n        this.stars = new Stars(level);\r\n        this.stars.generateBlock(0, 0);\r\n        this.vp.setMovementStart(\r\n            level.viewportMovementStartX || 0,\r\n            level.viewportMovementStartY || 0);\r\n\r\n        this.canvas.addEventListener(\"keydown\", this.setPlaySpeed, false);\r\n\r\n        if (!this.startButton){this.setupLaunchPad();}\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    setPlaySpeed(event){\r\n        if (![70,83].includes(event.keyCode)) return;\r\n        if (event.keyCode === 70){\r\n            if (this.playSpeed.fractional){\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -= 1;\r\n                }\r\n                else if (this.playSpeed.num === 1) {\r\n                    this.playSpeed.fractional = false;\r\n                    this.playSpeed.num = 2;\r\n                }   \r\n            }\r\n            else {\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n            }\r\n            }\r\n        }\r\n        if (event.keyCode === 83) {\r\n            if (this.playSpeed.fractional){\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n                }\r\n            }\r\n            else {\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -=1;\r\n                }\r\n                else if (this.playSpeed.num === 1){\r\n                    this.playSpeed.fractional = true;\r\n                    this.playSpeed.num = 2;\r\n                }\r\n            }\r\n        } \r\n        this.playSpeedMessage = new TimedMessage(\r\n            `Playspeed: ${this.playSpeed.fractional ? \r\n                (1/this.playSpeed.num).toFixed(2) : this.playSpeed.num}`);\r\n    }\r\n    \r\n    victoryMessage(){\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!', \r\n       400, 400);\r\n        ctx.fill();\r\n    }\r\n\r\n   \r\n        \r\n    setupLaunchPad(){\r\n        let game = this;\r\n        let canvas = game.canvas;\r\n        let setVelocityWithMouse = e => this.launchPad.setVelocity(e);\r\n        let launchBallWithMouse =  e => {if (this.launchPad.launch()){\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            canvas.removeEventListener(\"keydown\", keyDownHandler, false);\r\n            this.launchPad = null;\r\n\r\n        }}\r\n        let keyDownHandler = e => {\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n            game.launchPad.setVelocityByArrowKeys(e, () => {\r\n            canvas.removeEventListener('keydown', keyDownHandler, false); \r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            this.launchPad = null;\r\n            });\r\n        }\r\n        canvas.addEventListener(\"mousemove\", setVelocityWithMouse, false);\r\n        canvas.addEventListener('keydown', keyDownHandler, false);\r\n        canvas.addEventListener(\"click\", launchBallWithMouse, false);\r\n    }\r\n    \r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n        this.vp.moveWithBall(this.ball.interpolateX, this.ball.interpolateY,\r\n            this.ball);\r\n\r\n    }\r\n\r\n    moveObjects() {\r\n        let {playSpeed} = this;\r\n        if (playSpeed.fractional){\r\n            if (this.frameCount % playSpeed.num ===0 ){\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n\r\n        }\r\n        else {\r\n            for (let i = 1; i <= playSpeed.num; i++) {\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n        }\r\n    }\r\n    animate(time) {\r\n        if (this.hole.checkForWin()){\r\n            this.ball.stopped = true;\r\n            return this.initiateLevel();\r\n        }\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        this.draw();\r\n        this.lastTime = time;\r\n        this.frameCount += 1;\r\n\r\n        // every call to animate requests causes another call to animate\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    \r\n    draw() {\r\n        let {ctx, ball, vp, launchPad, hole} = this;\r\n        \r\n        ctx.width = 1200;\r\n        ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, 1200, 600);\r\n        if (this.stars){\r\n            for(let i=Math.floor(vp.x1/1000); i<= Math.ceil(vp.x2/1000); i++){\r\n                for (let j=Math.floor(vp.y1/1000); j<=Math.ceil(vp.y2/1000); j++){\r\n                    if (!this.stars.getBlock(i, j)){\r\n                        this.stars.generateBlock(i, j)\r\n                    }\r\n                    this.stars.drawBlock(ctx, i, j, vp);\r\n                }\r\n            }\r\n        }\r\n        hole.drawFlag(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        ball.draw(ctx);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx, vp));\r\n        hole.drawHole(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        this.planets.forEach(planet => \r\n            planet.draw(ctx, planet.x - vp.x1, planet.y - vp.y1));\r\n        if(this.startButton) this.startButton.draw(ctx);\r\n        if (this.playSpeedMessage) this.playSpeedMessage.draw(ctx);\r\n        if(launchPad) {launchPad.draw(ctx, launchPad.x - vp.x1, launchPad.y - vp.y1);}\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.initiateLevel();\r\n});\r\n"],"sourceRoot":""}