{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/fast-random/index.js","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/timedMessage.js","webpack:///./src/hole.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/levels/level3.js","webpack:///./src/start_button.js","webpack:///./src/levels/level4.js","webpack:///./src/levels/level5.js","webpack:///./src/obstacles.js","webpack:///./src/levels/level6.js","webpack:///./src/levels/level7.js","webpack:///./src/levels/level8.js","webpack:///./src/levels/level9.js","webpack:///./src/levels/titleLevel.js","webpack:///./src/titleSequence.js","webpack:///./src/viewport.js","webpack:///./src/stars.js","webpack:///./src/menu.js","webpack:///./src/level_menu/level_display.js","webpack:///./src/level_menu/level_menu.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","seed","_seed","_nextInt","nextInt","nextFloat","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","vectorLength","sqrt","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","maxTheta","this","draw","move","launch","arrowVector","updatePolar","updateArrowTip","updateLaunchVelocity","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","arrowLength","thetaRestrictionHelper","cos","sin","setVelocityByArrowKeys","vx","vy","vp","displayPos","x1","y1","vpX","vpY","currentPlanet","hideText","setLineDash","moveTo","lineTo","drawArrowBits","textX","textY","fillStyle","font","fillText","toFixed","fill","ball","textPos","stopped","event","cursor","clientX","clientY","dx","dy","dz","callback","al","keyCode","max","min","includes","src_ball","ax","ay","prevx","prevy","drawX","drawY","interpolateX","interpolateY","playSpeed","fractional","num","residue","frameCount","corners","logging","console","log","planets","forEach","planet","dz2","ballData","error","sticky","abs","stop","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","hole","checkForWin","winHandler","currentLevelNumber","levels","length","won","initiateLevel","undefined","setAuxPositions","Sticky_planet","density","floor","x2","y2","width","z","vDotNormal","new_vx","new_vy","viewport","lineWidth","timedMessage","text","duration","scale","drawFlag","drawHole","a","leftBound","messages","timedMessages","prevPerpComponent","perpComponent","push","level1","viewportMovementStartX","viewportMovementStartY","level2","level3","invSqrt","start_button_error","start_button","clickHandler","canvas","addEventListener","visible","removeEventListener","menu","level4","level5","polyFromFunction","f","g","b","step","t0","t1","result","obst","level6","ellipse1","ellipse2","concat","level7","ellipse","level8","level9","viewportStyle","titleLevel","splash","titleSequenceController","titleSequence","start","textRGB","phase","starRGB","requestAnimationFrame","animate","currentColor","slice","newRed","brightness","newBrightness","rgb","colorStr","stars","level","zoom","setMovementStart","setMovementStartPoints","moveWithBall","style","up","right","down","left","startUp","startRight","startDown","startLeft","ballX","ballY","moveCentered","ballOvershoot","catchupX","catchupY","pojo","src_stars","levelNum","topLeft","bottomRight","blocks","starsPerBlock","xInThousands","yInThousands","frandom","fast_random_default","Array","j","getBlock","generateBlock","drawBlock","startButton","level_display","orb","level_menu_error","level_menu","perSide","installEventListener","levelDisplays","map","lvl","idx","levelNumber","animating","ld","src_game","setAttribute","getContext","setPlaySpeed","restartLevel","levelControl","displayKeyCommands","switchToLevelMenu","window","printo","menuReady","levelMenu","clearRect","levelClass","viewportMovementUp","viewportMovementRight","viewportMovementDown","viewportMovementLeft","setVelocityWithMouse","e","launchBallWithMouse","keyDownHandler","arrowCodes","disableLaunchPad","delta","moveObjects","message","filter","checkRectangle","time","timeDelta","lastTime","drawStars","victoryMessage"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function random(seed) {\r\n\tfunction _seed(s) {\r\n\t\tif ((seed = (s|0) % 2147483647) <= 0) {\r\n\t\t\tseed += 2147483646;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _nextInt() {\r\n\t\treturn seed = seed * 48271 % 2147483647;\r\n\t}\r\n\r\n\tfunction _nextFloat() {\r\n\t\treturn (_nextInt() - 1) / 2147483646;\r\n\t}\r\n\r\n\t_seed(seed);\r\n\r\n\treturn {\r\n\t\tseed: _seed,\r\n\t\tnextInt: _nextInt,\r\n\t\tnextFloat: _nextFloat\r\n\t};\r\n}\r\n\r\nmodule.exports = random;\r\n","export const dottedArc = function(ctx, x, y, radius, theta0, theta1, color){\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2* Math.ceil(.5*(theta/a - 1)) + 1;\r\n    let dTheta = theta/numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i=0; i < numPieces; i++){ \r\n        ctx.beginPath();\r\n        if (i % 2 == 0){\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i*dTheta, theta0+(i+1)*dTheta \r\n                );\r\n                ctx.stroke();\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const vectorAngle = function(vector){\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x==0){\r\n        return y > 0 ? Math.PI/2 : -Math.PI/2;\r\n    }\r\n    \r\n    return x > 0 ? Math.atan(y/x) : Math.PI + Math.atan(y/x);\r\n    \r\n}\r\n\r\nexport const vectorLength = function(vector){\r\n    return Math.sqrt(vector[0] ** 2 + vector[1] ** 2);\r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2){\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1)*(a2-a1) <= 0 ||  (b2 - b1)*(a2-b1) <= 0\r\n    || (b1 - a2) * (a1-a2) <=0 || (b1 - b2) * (a1-b2) <=0;\r\n}\r\n","import {dottedArc, vectorAngle, vectorLength} from './helper';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0,1],  maxTheta = Math.PI/2, radius = 160, color = \"white\"){\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw= this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.arrowVector = this.arrowVector.bind(this);\r\n      this.updatePolar = this.updatePolar.bind(this);\r\n      this.updateArrowTip = this.updateArrowTip.bind(this);\r\n      this.updateLaunchVelocity = this.updateLaunchVelocity.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy=0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = {x: null, y: null};\r\n      this.arrowAngle = this.normalAngle;\r\n      this.arrowLength = 60;\r\n      this.maxTheta = maxTheta;\r\n      this.thetaRestrictionHelper = (1-Math.cos(maxTheta))**2 + (Math.sin(maxTheta))**2;\r\n      this.setVelocityByArrowKeys = this.setVelocityByArrowKeys.bind(this);\r\n  }\r\n\r\n  move(){\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n  }\r\n\r\n  vpX(){\r\n    return this.game.vp.displayPos(this).x;\r\n   }\r\n   vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n   }\r\n\r\n  arrowVector(){\r\n     const vp = this.game.vp;\r\n     return [this.arrowTip.x-this.x + vp.x1, this.arrowTip.y-this.y + vp.y1];\r\n  }\r\n  updatePolar(){\r\n   this.arrowLength = vectorLength(this.arrowVector());\r\n   this.arrowAngle = vectorAngle(this.arrowVector());\r\n  }\r\n  updateArrowTip(){\r\n     let vp = this.game.vp;\r\n     this.arrowTip.x = this.x -vp.x1 + this.arrowLength*Math.cos(this.arrowAngle);\r\n     this.arrowTip.y = this.y - vp.y1 + this.arrowLength*Math.sin(this.arrowAngle);\r\n  }\r\n  updateLaunchVelocity(){\r\n     this.launchVx = this.arrowVector()[0]/8;\r\n     this.launchVy = this.arrowVector()[1]/8;\r\n  }\r\n  draw(ctx) {\r\n   let x = this.vpX();\r\n   let y = this.vpY();\r\n   dottedArc(ctx, x, y, this.radius, \r\n      this.normalAngle - this.maxTheta, this.normalAngle +this.maxTheta, this.color);\r\n      let currentPlanet = this.game.currentPlanet;\r\n      if(this.arrowTip.x === null){currentPlanet.hideText = false;}\r\n   if (this.arrowTip.x !== null){\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.setLineDash([5,5]);\r\n     ctx.moveTo(x, y);\r\n     ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n     ctx.stroke();\r\n     this.drawArrowBits(ctx);\r\n     ctx.beginPath();\r\n      let textX = 0.5 * (x + this.arrowTip.x);\r\n      let textY = 0.5 * (y + this.arrowTip.y);\r\n        ctx.fillStyle = \"purple\"\r\n        ctx.font = `${21}px Arial`;\r\n        ctx.fillText(`Initial speed: ${(this.arrowLength/8).toFixed(2)}`, \r\n        `${textX}`,\r\n         `${textY}`);\r\n        ctx.fill();\r\n        let vp = this.game.vp;\r\n        let ball = this.game.ball;\r\n        if (textX  >=currentPlanet.textPos.x - vp.x1 - 150  && \r\n           textY >= currentPlanet.textPos.y - vp.y1 - 28 + ball.radius  &&\r\n         textY  <= currentPlanet.textPos.y - vp.y1 + 8 + ball.radius){\r\n            currentPlanet.hideText = true;\r\n         }\r\n         else { currentPlanet.hideText = false;}\r\n     \r\n   }\r\n}\r\n   drawArrowBits(ctx) {\r\n      let {x, y, arrowTip, game} = this;\r\n       x -= game.vp.x1;\r\n      y-= game.vp.y1;\r\n\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y -y] );\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta + 3*Math.PI/4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta - 3*Math.PI/4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n    launch(){\r\n       if (this.arrowTip.x === null){\r\n          return false;\r\n       }\r\n       this.game.ball.stopped = false;\r\n       this.game.ball.vx = this.launchVx;\r\n       this.game.ball.vy = this.launchVy;\r\n       return true;\r\n    }\r\n\r\n    setVelocity(event){\r\n      const vp = this.game.vp;\r\n      const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n      const dx = cursor.x - this.x +vp.x1;\r\n      const dy = cursor.y - this.y + vp.y1;\r\n      const dz = Math.sqrt(dx**2 + dy**2);\r\n      // console.log(`normal: ${this.normal}`);\r\n      // console.log(`trh: ${this.thetaRestrictionHelper}`);\r\n      // console.log(`dx, dy:${[dx, dy]}`);\r\n      if (\r\n         dx**2 + dy**2 <= this.radius ** 2 &&\r\n         (this.normal[0] - dx/dz)**2 + (this.normal[1] - dy/dz)**2 <= this.thetaRestrictionHelper\r\n          ) {\r\n             this.arrowTip.x = cursor.x;\r\n             this.arrowTip.y = cursor.y;\r\n            this.updateLaunchVelocity();\r\n           \r\n            this.updatePolar();\r\n            \r\n         }   \r\n         else {\r\n         this.arrowTip.x = null;}\r\n    }\r\n    setVelocityByArrowKeys(event, callback){\r\n       const al = this.arrowLength;\r\n       if (event.keyCode === 40){\r\n         this.arrowLength = Math.max(al -.4, 0);\r\n       }\r\n       if (event.keyCode === 38){\r\n         this.arrowLength = Math.min(al + .4, this.radius);\r\n       }\r\n       if (event.keyCode === 37){\r\n          this.arrowAngle -= .004;\r\n       }\r\n       if (event.keyCode === 39){\r\n          this.arrowAngle += .004;\r\n      }\r\n      if ([32,13].includes(event.keyCode)){\r\n         if (this.launch()){\r\n            callback();\r\n         }\r\n       }\r\n       this.updateArrowTip();\r\n       this.updateLaunchVelocity();\r\n       \r\n    }\r\n   }\r\n\r\n   export default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, color = \"white\", vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        this.prevx =x ;\r\n        this.prevy = y;\r\n        this.drawX = x;\r\n        this.drawY = y;\r\n        this.interpolateX = x;\r\n        this.interpolateY = y;\r\n        // this.logging= true;\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n\r\n    setAuxPositions(){\r\n        const playSpeed = this.game.playSpeed;\r\n        const vp = this.game.vp;\r\n        if (playSpeed.fractional && playSpeed.num > 1){\r\n            const num = playSpeed.num;\r\n            const residue = this.game.frameCount % num;\r\n            this.interpolateX =   (residue/num) * this.x + (1 - residue/num) * this.prevx;\r\n            this.interpolateY = (residue/num) * this.y + (1 - residue/num) * this.prevy; \r\n        }\r\n        else {\r\n            this.interpolateX = this.x;\r\n            this.interpolateY = this.y ;\r\n        }\r\n        this.drawX = this.interpolateX - vp.x1;\r\n         this.drawY = this.interpolateY - vp.y1;\r\n    }\r\n    \r\n    checkRectangle(corners){\r\n        const {x, y} = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    stop(){\r\n        this.stopped = true;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n    }\r\n    move(){\r\n        if(this.logging){\r\n            console.log(`ballx is ${this.x}`);\r\n            console.log(`bally is ${this.y}`);\r\n        }\r\n\r\n        this.prevx = this.x;\r\n        this.prevy = this.y;\r\n        if (this.stopped) return;\r\n        this.x += this.vx;\r\n        this.y +=  this.vy;\r\n        this.vx +=  this.ax;\r\n        this.vy +=  this.ay;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n            \r\n        this.game.planets.forEach(planet => {\r\n            const {dx, dy, dz2, dz, normal} = planet.ballData();\r\n            if (dz <=  this.radius + planet.radius){\r\n                let error = this.radius + planet.radius - dz;\r\n                this.x += error * normal[0];\r\n                this.y += error * normal[1];\r\n                this.ax = 0;\r\n                this.ay = 0;\r\n                if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy)<1 ){\r\n                    this.stop();\r\n                this.game.currentPlanet = planet;\r\n                this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal, planet.maxTheta );\r\n                this.game.setupLaunchPad();\r\n            }\r\n                else{planet.bounce(normal);}\r\n                \r\n            }\r\n            else{\r\n            this.ax -= (1/dz2)*planet.mass * dx/dz * .2;\r\n            this.ay -= (1/dz2)*planet.mass * dy/dz * .2;\r\n            } \r\n        });\r\n        const game = this.game;\r\n        game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()){\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n        if (game.hole.checkForWin()){\r\n            this.winHandler();\r\n        }\r\n    \r\n    \r\n    }\r\n\r\n    winHandler(){\r\n        this.stop();\r\n        const game = this.game;\r\n            if(game.currentLevelNumber >= game.levels.length - 1){\r\n                game.won = true;}\r\n                else{\r\n                game.initiateLevel();\r\n                game.playSpeed = {num: 1, fractional: false};\r\n                }\r\n    }\r\n\r\n    draw(ctx,  x, y, r = this.radius ) {\r\n        if(x === undefined) {this.setAuxPositions();\r\n        x = this.drawX;\r\n        y=this.drawY;}\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x, y, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n    constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, maxTheta=Math.PI/2,vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.density = density || 1;\r\n        this.mass = this.density * this.radius**3;\r\n        this.sticky = true;\r\n        this.hideText = false;\r\n        this.maxTheta = maxTheta;\r\n        this.textPos={x: x + radius + 2, y: y+ radius + .5};\r\n    }\r\n\r\n    vpX(){\r\n      return this.game.vp.displayPos(this).x;\r\n  }\r\n\r\n  vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n  }\r\n\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    ballData(){\r\n      const ball = this.game.ball;\r\n      const dx = ball.x - this.x;\r\n      const dy = ball.y - this.y;\r\n      const dz2 = ((dx)**2 + (dy)**2);\r\n      const dz = Math.sqrt(dz2);\r\n      const normal = [dx/dz, dy/dz];\r\n      return {dx, dy, dz2, dz, normal}\r\n  }\r\n\r\n    draw(ctx, x = this.x, y = this.y, r = this.radius ) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x, y, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n        ctx.fill();\r\n        if (!this.hideText){\r\n          ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `${14}px Arial`;\r\n        ctx.fillText(`Escape vel. ${(this.radius * this.density **.45 *.504 ).toFixed(2)}`, \r\n        `${x +  r + 2}`,\r\n         `${y + .5 * r + this.game.ball.radius}`);\r\n      };\r\n    }\r\n}\r\n\r\nexport default StickyPlanet;","import {intervalsIntersect} from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\", width = 1){\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1-y2)**2 + (x2 - x1)**2)\r\n        this.normal = [(y1 - y2)/z, (x2- x1)/z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n        this.width = width;\r\n    }\r\n    bounce(){\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n    checkForBall(){\r\n        \r\n        let ball = this.game.ball;\r\n        let {x1, x2, y1, y2} = this;\r\n        let normal = [y1-y2, x2-x1]\r\n        let {x, y, radius, vx, vy} = ball;\r\n        // if (x - radius > Math.max(x1, x2) || x + radius < Math.min(x1, x2)){\r\n        //     return false;\r\n        // }\r\n        // if (y - radius > Math.max(y1, y2) || y + radius < Math.min(y1, y2)){\r\n        //     return false;\r\n        // }\r\n        // let d = ((y2-y1)*x - (x2-x1)*y+x2*y1-y2*x1)/Math.sqrt((y2-y1)**2 + (x2-x1)**2);\r\n        // let result = -1.5*radius <= d && 1.5*radius >= d;\r\n        // if (result) {\r\n        // return result;\r\n        // }\r\n        let perpComponent = normal[0] * (x - x1) + normal[1]*(y-y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1]*(y+vy-y1);\r\n        return perpComponent * nextPerpComponent <= 0 \r\n        && intervalsIntersect([x, x+vx], [x1, x2]) \r\n        && intervalsIntersect([y, y+vy], [y1, y2]);\r\n    }\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n    draw(ctx, viewport ) {\r\n        let {x1, y1} = viewport;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.lineWidth = this.width;\r\n        ctx.moveTo(this.x1 - x1, this.y1 - y1);\r\n        ctx.lineTo(this.x2 - x1, this.y2 - y1);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n        ctx.lineWidth = 1;\r\n      };\r\n}\r\n\r\nexport default Obstacle;","class TimedMessage{\r\n    constructor(text, duration = 60, color, font = '30px Arial', x = 400, y = 300) {\r\n        this.text = text;\r\n        this.duration = duration;\r\n        this.font = font;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color || \"#3e78ad\";\r\n    }\r\n\r\n    draw(ctx){\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.font = this.font;\r\n        ctx.fillText(this.text, \r\n        this.x,\r\n        this.y);\r\n        ctx.fill();\r\n    }\r\n}\r\n\r\nexport default TimedMessage;","import {intervalsIntersect} from './helper';\r\nimport TimedMessage from './timedMessage';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0,-1], width = 100, scale = 1){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag= this.drawFlag.bind(this);\r\n        this.drawHole= this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n \r\n   move(){\r\n       this.x += this.vx;\r\n       this.y += this.vy;\r\n   }\r\n\r\n   drawFlag(ctx, x = this.x, y = this.y, scale=1) {\r\n       let normal = this.normal;\r\n       let a = scale;\r\n       ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"gold\";\r\n      ctx.moveTo(x, y);\r\n      ctx.lineTo(x + a* 50* normal[0] , y + a*50 * normal[1])\r\n       ctx.stroke();\r\n       ctx.fillStyle = \"#db0711\";\r\n       ctx.moveTo(x + a*50* normal[0] , y + a* 50 * normal[1]);\r\n       ctx.lineTo(x + a*70* normal[0] , y + a*70 * normal[1]);\r\n       ctx.lineTo(x + a*60* normal[0] - a*30* normal[1], y + a*60 * normal[1] + a*30 * normal[0]);\r\n       ctx.lineTo(x + a*50* normal[0] , y + a*50 * normal[1]);\r\n       ctx.fill();\r\n     }\r\n     drawHole(ctx, x = this.x, y = this.y, scale =1, vp) {\r\n         let {width, normal} = this;\r\n         let a = scale;\r\n             ctx.beginPath();\r\n             ctx.strokeStyle = \"purple\";\r\n             ctx.lineWidth = 2;\r\n             const leftBound = vp ? vp.x1 : -Infinity;\r\n             ctx.moveTo(Math.max(leftBound, x - a*normal[1] * width/2) , y + a*normal[0] * width/2 );\r\n             ctx.lineTo(Math.max(leftBound, x +  a*normal[1] * width/2), y - a*normal[0] * width/2);\r\n             ctx.stroke();\r\n             ctx.beginPath();\r\n             ctx.lineWidth = 1;\r\n\r\n        }\r\n        checkForWin(){\r\n            let {x, y, width, normal} = this;\r\n            let ball = this.game.ball;\r\n            let messages = this.game.timedMessages;\r\n\r\n            let prevPerpComponent = normal[0] * (ball.prevx - x) + normal[1]*(ball.prevy-y);\r\n            let perpComponent = normal[0] * (ball.x - x) + normal[1]*(ball.y-y);\r\n            if( intervalsIntersect([ ball.prevx, ball.x], [x - 0.5 * width* normal[1], x+ 0.5* width * normal[1]]) \r\n            && intervalsIntersect([ ball.prevy, ball.y], [y - 0.5 * width* normal[0], y + 0.5 * width* normal[0]])\r\n            ){\r\n                if (prevPerpComponent >= 0  && perpComponent <= 0) {\r\n                    for (let i=0; i< messages.length; i++){\r\n                        if(messages[i].text===\"WRONG WAY\"){\r\n                            messages[i] = new TimedMessage(\"oh nice\", 14, \"#9e8720\", '18px Arial', this.x + 50, this.y + 100);\r\n                        }\r\n                    }\r\n                    return true;}\r\n                if (prevPerpComponent < 0 && perpComponent > 0) {\r\n                    messages.push(\r\n                    new TimedMessage(\"WRONG WAY\", 80, \"#9c1c22\", '28px Trebuchet MS', this.x, this.y + 70)\r\n                    );}\r\n            }\r\n            return false;\r\n        }\r\n \r\n    \r\n     \r\n    }\r\n \r\n    export default Hole;\r\n ","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport Hole from '../hole';\r\nclass Level1 {\r\n    constructor(game){\r\n        this.ball = new Ball(game, 300 + 25 + 5, 240 );\r\n        this.corners = [[-200, -200], [1200, 600]];\r\n        this.currentPlanet = new StickyPlanet(game, 300, 240, 25, \"#27753a\", 1);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            // new StickyPlanet(game, 640, 490, 22, \"white\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 680, 435,  [0,-1], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 750, 500),\r\n            new Obstacle(game, 750, 150, 750, 500)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 600, 300);\r\n        this.currentPlanet = new StickyPlanet(game, 600, 330, 25, \"#27753a\", 1);\r\n        this.corners = [[-200, -800], [2400, 1900]];\r\n        this.launchPad = new LaunchPad(game, 600, 300, [0, -1]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 640, 180);\r\n        this.obstacles=[];\r\n        \r\n        }\r\n}\r\n\r\nexport default Level2;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport Hole from '../hole';\r\nclass Level3 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 640, 490, 22, \"orange\", 2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 420,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            new Obstacle(game, 250, 150, 640, 340),\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level3;","const error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\nclass StartButton{\r\n    constructor(game, x, y, color = 'black'){\r\n        this.game = game;\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        game.canvas.addEventListener(\"click\", this.clickHandler);\r\n        this.visible = true;\r\n        this.x =x;\r\n        this.y = y;\r\n        this.color = color;\r\n    }\r\n    draw(ctx){\r\n        if(this.visible){\r\n            ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.font = `${25}px Arial`;\r\n        ctx.fillText(`Start`, \r\n       this.x, this.y);\r\n        ctx.fill();\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = this.color;\r\n            ctx.moveTo(this.x - 20, this.y+10);\r\n            ctx.lineTo(this.x - 20, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y + 10 );\r\n            ctx.lineTo(this.x - 20, this.y + 10);\r\n            ctx.stroke();\r\n        }\r\n\r\n    }\r\n    clickHandler(event){\r\n        const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n        if (\r\n            cursor.x >= this.x -20 && cursor.x <= this.x + 75\r\n            && cursor.y >=this.y - 25 && cursor.y <= this.y + 10\r\n            ){\r\n                this.game.setupLaunchPad();\r\n                this.game.canvas.removeEventListener(\"click\", this.clickHandler, false);\r\n                this.visible = false;\r\n                this.game.menu = null;\r\n            }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default StartButton;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level4 {\r\n    constructor(game){\r\n        const sqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 560 + (25 + 5), 245);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 560, 245, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 280, 20, \"orange\", 1),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 665, 330,   [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 250, 280, 640, 280),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level4;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level5 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 200 + (35+ 5)*invSqrt, 380 - (35 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 200, 380, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, -invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 330,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            // new Obstacle(game, 250, 150, 640, 300),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level5;","import Obstacle from './obstacle';\r\n\r\nexport const polyFromFunction = function(game, f, g, a, b, step, color, width){\r\n    let [t0, t1] = [a, a+ step];\r\n    let result = [];\r\n    while( t1 <= b + .01){\r\n        const obst = new Obstacle(game, f(t0), g(t0), f(t1), g(t1), color, width);\r\n        t0 += step;\r\n        t1 += step;\r\n        result.push(obst);\r\n    }\r\n    return result;\r\n}","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level6 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 150 + 5 + 35, 190 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 150, 190, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            // new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 400, 390,  [sqrt,-sqrt], 100);\r\n        const ellipse1 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), -Math.PI/4 + .5, Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse1).concat(ellipse2);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level6;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level7 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 185, 260 - 12 - 5 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 185, 260, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [0, -1],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 650, 290, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 500, 340, 35, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 535, 270,  [-1, 0], 100);\r\n        const ellipse = polyFromFunction(game,\r\n            t => 530+  26* t * Math.sin(t), t => 330 + 27 * t* Math.cos(t), 3.5, 17, Math.PI/100);\r\n        this.obstacles = [\r\n        ]\r\n\r\n        this.obstacles.push(...ellipse);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level7;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level8 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 350 + (12 + 5)*invSqrt, 120 + (12 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 350, 120, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 1050, 300, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 820, 300, 45, \"orange\", 3),\r\n            new StickyPlanet(game, 500, 230, 50, \"orange\", .2),\r\n            // new StickyPlanet(game, 520, 280, 40, \"orange\", 1),\r\n            new StickyPlanet(game, 500, 310, 15, \"orange\", 10),\r\n            \r\n        ]\r\n        // const ellipse1 = polyFromFunction(game,\r\n        //     t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 800+ 300* Math.sin(t), t => 300 + 120* Math.cos(t), -0, 1.01 * Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse2);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 1050, 300,  [-1, 0], 100);\r\n\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level8;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport Hole from '../hole';\r\nclass Level9 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 550 +12+5, 120 );\r\n        this.corners = [[-55500, -222500], [2225400, 2225100]];\r\n        this.currentPlanet = new StickyPlanet(game, 550, 120, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 1120, 1200, 750, \"orange\", .005)            \r\n        ]\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 50 + 400* Math.cos(t), t => 400 - 250* Math.sin(t), -.9,    Math.PI, Math.PI/60);\r\n        this.obstacles = [\r\n        ].concat(ellipse2);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 30, 430,  [0, -1], 480);\r\n        this.viewportStyle = 'centered';\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level9;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport Hole from '../hole';\r\nclass TitleLevel {\r\n    constructor(game){\r\n        this.splash = true;\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 932, 190 );\r\n        this.ball.stopped = false;\r\n        this.ball.vx = -1.6;\r\n        this.ball.vy = 3.1;\r\n        this.ball.winHandler = this.winHandler.bind(this.ball);\r\n        this.viewportStyle = \"stopped\";\r\n        this.corners = [[-55500, -222500], [2225400, 2225100]];\r\n        this.currentPlanet = new StickyPlanet(game, -1000, 120, 12, \"black\", .0001, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, -1000, this.ball.y, [0, 1],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 500, 175, 12, \"#27753a\", 25, Math.PI/2)\r\n\r\n        ]\r\n        const ellipse1 = polyFromFunction(game,\r\n            t => 910 + 34* Math.cos(t), t => 155 + 48* Math.sin(t), .55,    1.75*Math.PI, Math.PI/60,\r\n            \"orange\", 2);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 910 + 45* Math.cos(t), t => 155 + 59* Math.sin(t), .5,    1.8*Math.PI, Math.PI/60,\r\n            \"orange\", 25);\r\n\r\n        this.obstacles = [\r\n            // new Obstacle(game, 350, 100, 350, 250),\r\n            // new Obstacle(game, 350, 250, 650, 250),\r\n            // new Obstacle(game, 650, 250, 650, 100),\r\n            // new Obstacle(game, 650, 100, 350, 100),\r\n        ].concat(ellipse1);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 980, 222,  [0, -1], 100);\r\n        }\r\n        winHandler(){\r\n        // this.stop();\r\n        const game = this.game;\r\n        game.titleSequenceController.winHandler();\r\n                \r\n    }\r\n\r\n}\r\n\r\nexport default TitleLevel;","import TitleLevel from './levels/titleLevel';\r\nclass TitleSequence {\r\n    constructor(game){\r\n        this.game = game;\r\n        this.start = this.start.bind(this);\r\n        this.textRGB=[75,45,0];\r\n        this.phase = 0;\r\n        this.starRGB = [0,0,0];\r\n        }\r\n        start(){\r\n            const game = this.game;\r\n\r\n            game.initiateLevel(TitleLevel);\r\n            requestAnimationFrame(this.game.animate);\r\n        }\r\n\r\n        draw(ctx){\r\n            if (this.phase === 1){\r\n                let currentColor = this.textRGB.slice();\r\n            const newRed = Math.min(255, currentColor[0]+2);\r\n            this.textRGB=[newRed, Math.floor(newRed * 165/255), 0]; \r\n            let brightness = this.starRGB[0];\r\n            let newBrightness = Math.min(brightness + 2, 255);\r\n            this.starRGB = [newBrightness, newBrightness, newBrightness];\r\n            }\r\n            ctx.fillStyle = \r\n            `rgb(${this.textRGB[0]},${this.textRGB[1]},${this.textRGB[2]})`;\r\n            ctx.font = `bold 180px Arial`; \r\n            if(this.phase === 1){\r\n                ctx.font = `bold 180px Arial`;    \r\n                ctx.fillText(\"SPACE\", 485, 220);                 \r\n            }\r\n            ctx.fillText(\"GOLF\", 500, 400);\r\n\r\n        }\r\n\r\n        drawStars(ctx){\r\n            const rgb = this.starRGB;\r\n            const colorStr = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\r\n            this.game.stars.draw(ctx, colorStr);\r\n\r\n        }\r\n\r\n        winHandler(){\r\n            this.phase = 1;\r\n            const game = this.game;\r\n            const ctx = game.ctx;\r\n            // game.animating = false;\r\n        }\r\n}\r\n\r\nexport default TitleSequence;","class Viewport {\r\n    constructor(level, x1 = 0, y1 =0, x2 = 1200 + x1, y2 = 600 + y1, zoom =100){\r\n        this.x1 = x1;\r\n        this.y1= y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.zoom = zoom;\r\n        this.setMovementStart = this.setMovementStartPoints.bind(this);\r\n        this.moveWithBall = this.moveWithBall.bind(this);\r\n        this.style = level.viewportStyle;\r\n        \r\n    }\r\n    setMovementStartPoints(up, right, down, left){\r\n        this.startUp = up || 0;\r\n        this.startRight = right || 1100;\r\n        this.startDown = down || 530;\r\n        this.startLeft = left || 0;\r\n    }\r\n    moveWithBall(ballX, ballY, ball){\r\n        if(this.style===\"stopped\"){return;}\r\n        if (this.style === 'centered'){return this.moveCentered(ballX, ballY);}\r\n        let {x1, x2, y1, y2} = this;\r\n        let ballOvershoot = {x: ballX - .5*(x1+x2), y: ballY - .5 *(y1+y2)};\r\n        if (\r\n            // ballOvershoot.x  > 0 &&\r\n             ballX > this.startRight || ballX < this.startLeft){\r\n            const catchupX = \r\n            Math.abs(ballOvershoot.x) < Math.abs(1.4 * ball.vx) ? \r\n            ballOvershoot.x : 1.4 * ball.vx;\r\n            this.x1 += catchupX;\r\n            this.x2 += catchupX;\r\n        }\r\n        if (\r\n            // ballOvershoot.y  > 0 && \r\n            ballY > this.startDown || ballY < this.startUp\r\n            ){\r\n            const catchupY = Math.abs(ballOvershoot.y) <Math.abs(1.4 * ball.vy) ?\r\n             ballOvershoot.y : 1.4 * ball.vy;\r\n            this.y1 += catchupY;\r\n            this.y2 += catchupY;\r\n        }\r\n    }\r\n\r\n    moveCentered(ballX, ballY){\r\n        this.x1 = ballX - 600 * 100/this.zoom;\r\n        this.x2 = ballX + 600 * 100/this.zoom;\r\n        this.y1 = ballY - 300 * 100/this.zoom;\r\n        this.y2 = ballY + 300 * 100/this.zoom;\r\n    }\r\n\r\n    displayPos(pojo){\r\n        return {x: pojo.x - this.x1, y: pojo.y - this.y1 }\r\n    }\r\n}\r\n\r\nexport default Viewport;","import fastRandom from 'fast-random';\r\n\r\nclass Stars {\r\n    constructor(game, level, levelNum){\r\n        this.topLeft = {x: level.corners[0]-600, y: level.corners[0]-300};\r\n        this.bottomRight = {x: level.corners[1]+600, y: level.corners[1]+300};\r\n        this.blocks = {};\r\n        this.starsPerBlock = 100;\r\n        this.levelNum = levelNum;\r\n        this.game = game;\r\n    }\r\n\r\n    generateBlock(xInThousands, yInThousands){\r\n        let x = xInThousands;\r\n        let y = yInThousands;\r\n        const seed = 1000*x + y + this.levelNum * 10000;\r\n        const frandom = fastRandom(seed);\r\n        const stars = new Array(this.starsPerBlock);\r\n        for (let i=0; i< stars.length; i++){\r\n            stars[i] = [\r\n                1000*(x + frandom.nextFloat()), \r\n                1000*(y+frandom.nextFloat()), \r\n                .3 + .8 * (frandom.nextFloat())**9]\r\n        }\r\n        this.blocks[`${x}, ${y}`] = stars;\r\n    }\r\n\r\n    drawBlock(ctx, xInThousands, yInThousands, viewport, color = \"white\"){\r\n        let stars = this.blocks[`${xInThousands}, ${yInThousands}`];\r\n        ctx.fillStyle = color;\r\n        for (let i=0; i< stars.length; i++){\r\n            let [x, y, r] = stars[i];\r\n            ctx.beginPath();\r\n            \r\n            ctx.arc(\r\n              x - viewport.x1, y - viewport.y1, r, 0, 2 * Math.PI, true\r\n            );\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    getBlock(x, y){\r\n        return this.blocks[`${x}, ${y}`];\r\n    }\r\n\r\n    draw(ctx, color){\r\n        let vp = this.game.vp;\r\n        for(let i=Math.floor(vp.x1/1000); i<= Math.ceil(vp.x2/1000); i++){\r\n            for (let j=Math.floor(vp.y1/1000); j<=Math.ceil(vp.y2/1000); j++){\r\n                if (!this.getBlock(i, j)){\r\n                    this.generateBlock(i, j)\r\n                }\r\n                this.drawBlock(ctx, i, j, vp, color);\r\n            }\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default Stars;","import StartButton from \"./start_button\";\r\n\r\nclass Menu{\r\n    constructor(game){\r\n        this.color = '#e8e4da';\r\n        this.game = game;\r\n        this.startButton = new StartButton(game, 500, 350);\r\n    }\r\n\r\n    draw(ctx, x = 400, y = 100) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n         x, y, x+200, y+250\r\n        );\r\n        ctx.stroke();\r\n        ctx.fill();\r\n        // ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n          ctx.beginPath();\r\n        ctx.fillStyle = \"black\";\r\n        ctx.font = `${18}px Arial`;\r\n        ctx.fillText(`Use mouse or arrow keys to select launch direction. Click to launch.`, \r\n       x + 30, y + 40);\r\n        ctx.fillText(`Use 's' or 'f' for slower or faster playspeed, and 'p' to pause.`, \r\n       x + 30, y + 80);\r\n        ctx.fillText(`Pressing 'r' restarts the current level.`, \r\n       x + 30, y + 120);\r\n        ctx.fillText(`Press 'm' to return to this menu.`, \r\n       x + 30, y + 160);\r\n        \r\n    //      `${y + .5 * r + this.game.ball.radius}`);\r\n        ctx.fill();\r\n        this.startButton.draw(ctx);\r\n        }\r\n}\r\n\r\nexport default Menu;","class LevelDisplay{\r\n    constructor(level, x, y, scale){\r\n        this.level = level;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.scale = scale;\r\n        this.vp= {x1: x, y1: y, x2: x + scale*1200, y2: y +scale* 600};\r\n    }\r\n\r\n    draw(ctx){\r\n        const {obstacles, ball, planets, hole} = this.level;\r\n        const orbs = [ball].concat(planets);\r\n        orbs.forEach(orb => {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = orb.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.scale*orb.x+this.x, \r\n          this.scale*orb.y + this.y, \r\n          this.scale*orb.radius, \r\n          0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n        }\r\n        );\r\n        ctx.setLineDash([]);\r\n        obstacles.forEach(obst => {\r\n            if (obst.y1 <0 || obst.y2 <0 || obst.x1<0 || obst.x2 < 0){return;}\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.scale * obst.x1 + this.x, this.scale * obst.y1 + this.y);\r\n        ctx.lineTo(this.scale * obst.x2 + this.x, this.scale * obst.y2 + this.y);\r\n        ctx.strokeStyle = obst.color;\r\n        ctx.stroke();\r\n        })\r\n        hole.drawFlag(ctx, this.scale*hole.x + this.x, this.scale*hole.y + this.y, this.scale);\r\n        hole.drawHole(ctx, this.scale*hole.x + this.x, this.scale*hole.y + this.y, this.scale,\r\n            this.vp);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LevelDisplay;","import LevelDisplay from './level_display';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LevelMenu {\r\n    constructor(game){\r\n        this.game = game;\r\n        const levels = game.levels.slice(1);\r\n        const perSide = Math.ceil(Math.sqrt(levels.length));\r\n        this.perSide = perSide;\r\n        this.draw = this.draw.bind(this);\r\n        this.installEventListener = this.installEventListener.bind(this);\r\n        this.removeEventListener = this.removeEventListener.bind(this);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        const scale = 1/perSide;\r\n        this.levelDisplays = levels.map((lvl, idx)=>{\r\n            return (new LevelDisplay(\r\n                new lvl(game),\r\n          (idx % perSide) * 1200/perSide,  \r\n         600 *scale* Math.floor(idx/perSide), scale\r\n         )\r\n         );}\r\n        )\r\n    }\r\n\r\n    installEventListener(){\r\n        this.game.canvas.addEventListener(\r\n            \"click\", this.clickHandler\r\n        )\r\n    }\r\n\r\n    clickHandler(event){\r\n        const perSide = this.perSide;\r\n        const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n        const i = Math.floor(perSide * cursor.x/1200);\r\n        const j = Math.floor(perSide * cursor.y/600);\r\n        const levelNumber = 1 + i + j * perSide;\r\n        this.game.currentLevelNumber = levelNumber - 1;\r\n        this.game.animating = true;\r\n        this.game.animate();\r\n        this.game.initiateLevel();\r\n        this.removeEventListener();\r\n    }\r\n\r\n    removeEventListener(){\r\n        this.game.canvas.removeEventListener(\r\n            \"click\", this.clickHandler\r\n        )\r\n    }\r\n\r\n    draw(ctx){\r\n        ctx.strokeStyle = 'white';\r\n        const perSide = this.perSide;\r\n        for (let i=0; i<=perSide; i++){\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, i*600/perSide);\r\n            ctx.lineTo(1200, i*600/perSide);\r\n            ctx.stroke();\r\n            ctx.beginPath();\r\n            ctx.moveTo(i*1200/perSide, 0);\r\n            ctx.lineTo(i*1200/perSide, 600);\r\n            ctx.stroke();\r\n        }\r\n        this.levelDisplays.forEach(ld=>ld.draw(ctx));\r\n    }\r\n}    \r\n\r\nexport default LevelMenu;\r\n","import Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\nimport Level3 from './levels/level3';\r\nimport Level4 from './levels/level4';\r\nimport Level5 from './levels/level5';\r\nimport Level6 from './levels/level6';\r\nimport Level7 from './levels/level7';\r\nimport Level8 from './levels/level8';\r\nimport Level9 from './levels/level9';\r\nimport TitleSequence from './titleSequence';\r\nimport TitleLevel from './levels/titleLevel';\r\nimport TimedMessage from './timedMessage';\r\nimport Viewport from './viewport';\r\nimport Stars from './stars';\r\nimport Menu from './menu';\r\nimport LevelMenu from './level_menu/level_menu';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.animating = true;\r\n        this.levels = [null, \r\n            TitleLevel,\r\n            Level1, \r\n            Level2,\r\n            Level3,\r\n            Level4,\r\n            Level5,\r\n            Level6,\r\n            Level7,\r\n            Level8,\r\n            Level9\r\n        ];\r\n        // this.menu = new Menu(this);\r\n        this.currentLevelNumber = 0;\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n        this.playSpeed = {num: 1, fractional: false};\r\n        this.setPlaySpeed = this.setPlaySpeed.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.frameCount = 0;\r\n        this.vp = new Viewport({});\r\n        this.restartLevel = this.restartLevel.bind(this);\r\n        this.levelControl = this.levelControl.bind(this);\r\n        this.displayKeyCommands = this.displayKeyCommands.bind(this);\r\n        this.switchToLevelMenu = this.switchToLevelMenu.bind(this);\r\n        this.timedMessages = [];\r\n        this.canvas.addEventListener(\"keydown\", this.levelControl);\r\n        window.printo = () => {\r\n        let ball = this.ball;\r\n        console.log(`ballx: ${ball.x}, bpx: ${ball.prevx}, \r\n            balldrawX: ${ball.drawX}, ballInterX: ${ball.interpolateX}\r\n            viewportx1: ${this.vp.x1} viewporty1: ${this.vp.y1}`\r\n            )\r\n        }\r\n\r\n        // requestAnimationFrame(this.animate.bind(this));\r\n        this.menuReady();\r\n        this.titleSequenceController = new TitleSequence(this);\r\n        \r\n\r\n    }\r\n    start(){\r\n        this.titleSequenceController.start();\r\n    }\r\n\r\n    levelControl(event){\r\n        console.log(event.keyCode);\r\n        if (event.keyCode === 82) this.restartLevel();\r\n        if (event.keyCode === 76) this.switchToLevelMenu();\r\n    }\r\n\r\n    switchToLevelMenu(){\r\n        const levelMenu = new LevelMenu(this);\r\n        const {ctx, canvas} = this;\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.fillStyle = \"black\";\r\n        this.animating = false;\r\n        ctx.clearRect(0, 0, 1200, 600);\r\n        levelMenu.draw(this.ctx);\r\n        levelMenu.installEventListener();\r\n    }\r\n\r\n    initiateLevel(levelClass) {\r\n        if(!levelClass){\r\n            this.currentLevelNumber += 1;\r\n            levelClass = this.levels[this.currentLevelNumber];\r\n        }\r\n        \r\n        const level = new levelClass(this);\r\n        this.level = level;\r\n        this.vp = new Viewport(level);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets=level.planets || [];\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles || [];\r\n        this.corners = level.corners;\r\n        this.stars = new Stars(this, level, this.currentLevelNumber);\r\n        this.stars.generateBlock(0, 0);\r\n        this.vp.setMovementStartPoints(\r\n            level.viewportMovementUp,\r\n            level.viewportMovementRight,\r\n            level.viewportMovementDown,\r\n            level.viewportMovementLeft);\r\n\r\n        this.canvas.addEventListener(\"keydown\", this.setPlaySpeed, false);\r\n\r\n        if (!this.menu){this.setupLaunchPad();}\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    setPlaySpeed(event){\r\n        if (![70,83].includes(event.keyCode)) return;\r\n        if (event.keyCode === 70){\r\n            if (this.playSpeed.fractional){\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -= 1;\r\n                }\r\n                else if (this.playSpeed.num === 1) {\r\n                    this.playSpeed.fractional = false;\r\n                    this.playSpeed.num = 2;\r\n                }   \r\n            }\r\n            else {\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n            }\r\n            }\r\n        }\r\n        if (event.keyCode === 83) {\r\n            if (this.playSpeed.fractional){\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n                }\r\n            }\r\n            else {\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -=1;\r\n                }\r\n                else if (this.playSpeed.num === 1){\r\n                    this.playSpeed.fractional = true;\r\n                    this.playSpeed.num = 2;\r\n                }\r\n            }\r\n        } \r\n        this.timedMessages = [ new TimedMessage(\r\n            `Playspeed: ${this.playSpeed.fractional ? \r\n                (1/this.playSpeed.num).toFixed(2) : this.playSpeed.num}`)];\r\n    }\r\n    \r\n    victoryMessage(){\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!', \r\n       400, 400);\r\n        ctx.fill();\r\n    }\r\n\r\n    \r\n        \r\n    setupLaunchPad(){\r\n        let game = this;\r\n        let canvas = game.canvas;\r\n        let setVelocityWithMouse = e => this.launchPad.setVelocity(e);\r\n        let launchBallWithMouse =  e => {if (this.launchPad.launch()){\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            canvas.removeEventListener(\"keydown\", keyDownHandler, false);\r\n            this.launchPad = null;\r\n\r\n        }}\r\n        let arrowCodes = [37, 38, 39, 40];\r\n        let keyDownHandler = e => {\r\n            if (arrowCodes.includes(e.keyCode)){\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);}\r\n            game.launchPad.setVelocityByArrowKeys(e, () => {\r\n            canvas.removeEventListener('keydown', keyDownHandler, false); \r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            this.launchPad = null;\r\n            });\r\n        }\r\n\r\n        this.setVelocityWithMouse = setVelocityWithMouse;\r\n        this.keyDownHandler = keyDownHandler;\r\n        this.launchBallWithMouse = launchBallWithMouse;\r\n        canvas.addEventListener(\"mousemove\", this.setVelocityWithMouse, false);\r\n        canvas.addEventListener('keydown', this.keyDownHandler, false);\r\n        canvas.addEventListener(\"click\", this.launchBallWithMouse, false);\r\n    }\r\n    \r\n    disableLaunchPad(){\r\n        let canvas = this.canvas;\r\n        canvas.removeEventListener('keydown', this.keyDownHandler, false); \r\n        canvas.removeEventListener(\"click\", this.launchBallWithMouse, false);\r\n        canvas.removeEventListener('mousemove', this.setVelocityWithMouse, false);\r\n    }\r\n\r\n    menuReady(){\r\n        let canvas = this.canvas;\r\n        canvas.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 77){\r\n            this.disableLaunchPad();\r\n            this.menu = new Menu(this)}\r\n            if(e.keyCode === 80){\r\n                if(this.animating){this.animating = false;}\r\n                else{\r\n                    this.animating = true;\r\n                    requestAnimationFrame(this.animate.bind(this));\r\n                }\r\n            }\r\n        }\r\n        , false);\r\n                \r\n    }\r\n\r\n    \r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n        this.vp.moveWithBall(this.ball.interpolateX, this.ball.interpolateY,\r\n            this.ball);\r\n        this.timedMessages.forEach(message => {\r\n            message.duration -= 1;\r\n        });\r\n        this.timedMessages = this.timedMessages.filter(message => \r\n           (message.duration >= 0) );\r\n\r\n    }\r\n\r\n    moveObjects() {\r\n        let {playSpeed} = this;\r\n        if (playSpeed.fractional){\r\n            if (this.frameCount % playSpeed.num ===0 ){\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n\r\n        }\r\n        else {\r\n            for (let i = 1; i <= playSpeed.num; i++) {\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(time) {\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        if (!this.animating) return;\r\n        this.draw();\r\n        this.lastTime = time;\r\n        this.frameCount += 1;\r\n\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    displayKeyCommands(){\r\n        let ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `15px Arial`;\r\n        ctx.fillText('r to restart', 1090, 510);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillText('p to pause', 1090, 525);\r\n        ctx.fill();\r\n    \r\n        ctx.beginPath();\r\n        ctx.fillText('l to select level', 1090, 540);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillText('s/f: slow/fast', 1090, 555);\r\n        ctx.fill();\r\n\r\n    }\r\n\r\n\r\n    draw() {\r\n        let {ctx, ball, vp, launchPad, hole} = this;\r\n        // ctx.width = 1200;\r\n        // ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.clearRect(0, 0, 1200, 600);\r\n        this.displayKeyCommands();\r\n        if (this.level.splash){\r\n            // ctx.fillStyle = \"orange\";\r\n            // ctx.font = `bold 180px Arial`;    \r\n            // ctx.fillText(\"SPACE\", 485, 220);\r\n            // ctx.fillText(\"GOLF\", 500, 400);\r\n        }\r\n        if (this.stars){\r\n           if (this.titleSequenceController){\r\n               this.titleSequenceController.drawStars(ctx);\r\n           }\r\n           else this.stars.draw(ctx);\r\n        }\r\n        hole.drawFlag(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        hole.drawHole(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx, vp));\r\n        ball.draw(ctx);\r\n        this.planets.forEach(planet => \r\n            planet.draw(ctx, planet.x - vp.x1, planet.y - vp.y1));\r\n        this.timedMessages.forEach( message => {message.draw(ctx);})\r\n        if(launchPad) {launchPad.draw(ctx);}\r\n        if(this.won) this.victoryMessage();\r\n        ctx.fillStyle = \"#3e78ad\";\r\n        ctx.font = `14px Arial`;\r\n        ctx.fillText(`Velocity_x=${this.ball.vx.toFixed(0)}, Velocity_y=${this.ball.vy.toFixed(0)},\r\n        speed = ${Math.sqrt(this.ball.vx ** 2 + this.ball.vy **2).toFixed(0)}`, \r\n        20,\r\n         550);\r\n        ctx.font = '16px Arial';\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillText(`Level ${this.currentLevelNumber - 1}`, \r\n        20,\r\n         580);\r\n            if (this.menu) this.menu.draw(ctx);\r\n            if (this.titleSequenceController){\r\n                this.titleSequenceController.draw(ctx);\r\n            }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.start();\r\n});\r\n"],"sourceRoot":""}