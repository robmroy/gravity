{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/hole.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","vectorLength","sqrt","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","this","draw","move","launch","arrowVector","updatePolar","updateArrowTip","updateLaunchVelocity","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","arrowLength","vx","vy","cos","sin","setLineDash","moveTo","lineTo","drawArrowBits","fillStyle","font","fillText","toFixed","fill","ball","stopped","event","cursor","clientX","clientY","dx","dy","keyCode","src_ball","ax","ay","corners","logging","console","log","ballSpeedMultiplier","abs","planets","forEach","planet","dz2","dz","ballData","error","sticky","currentPlanet","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","Sticky_planet","density","floor","x1","y1","x2","y2","z","vDotNormal","new_vx","new_vy","hole","width","drawFlag","drawHole","level1","invSqrt","level2","src_game","canvas","setAttribute","getContext","levels","currentLevelNumber","initiateLevel","length","victoryMessage","level","requestAnimationFrame","animate","func","e","addEventListener","onkeydown","removeEventListener","setVelocityByArrowKeys","delta","moveObjects","checkRectangle","restartLevel","time","checkForWin","timeDelta","lastTime","step","height","fillRect"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const dottedArc = function(ctx, x, y, radius, theta0, theta1, color){\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2* Math.ceil(.5*(theta/a - 1)) + 1;\r\n    let dTheta = theta/numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i=0; i < numPieces; i++){ \r\n        ctx.beginPath();\r\n        if (i % 2 == 0){\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i*dTheta, theta0+(i+1)*dTheta \r\n                );\r\n                ctx.stroke();\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const vectorAngle = function(vector){\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x==0){\r\n        return y > 0 ? Math.PI/2 : -Math.PI/2;\r\n    }\r\n    \r\n    return x > 0 ? Math.atan(y/x) : Math.PI + Math.atan(y/x);\r\n    \r\n}\r\n\r\nexport const vectorLength = function(vector){\r\n    return Math.sqrt(vector[0] ** 2 + vector[1] ** 2);\r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2){\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1)*(a2-a1) <= 0 ||  (b2 - b1)*(a2-b1) <= 0\r\n    || (b1 - a2) * (a1-a2) <=0 || (b1 - b2) * (a1-b2) <=0;\r\n}\r\n","import {dottedArc, vectorAngle, vectorLength} from './helper';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0,1], radius = 100,  color = \"white\"){\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw= this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.arrowVector = this.arrowVector.bind(this);\r\n      this.updatePolar = this.updatePolar.bind(this);\r\n      this.updateArrowTip = this.updateArrowTip.bind(this);\r\n      this.updateLaunchVelocity = this.updateLaunchVelocity.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy=0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = {x: null, y: null};\r\n      this.arrowAngle = this.normalAngle;\r\n      this.arrowLength = 60;\r\n  }\r\n\r\n  move(){\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n  }\r\n\r\n  arrowVector(){\r\n     return [this.arrowTip.x-this.x, this.arrowTip.y-this.y];\r\n  }\r\n  updatePolar(){\r\n   this.arrowLength = vectorLength(this.arrowVector());\r\n   this.arrowAngle = vectorAngle(this.arrowVector());\r\n  }\r\n  updateArrowTip(){\r\n     this.arrowTip.x = this.x + this.arrowLength*Math.cos(this.arrowAngle);\r\n     this.arrowTip.y = this.y + this.arrowLength*Math.sin(this.arrowAngle);\r\n  }\r\n  updateLaunchVelocity(){\r\n     this.launchVx = this.arrowVector()[0]/4;\r\n     this.launchVy = this.arrowVector()[1]/4;\r\n  }\r\n  draw(ctx ) {\r\n   // ctx.beginPath();\r\n   // ctx.strokeStyle = this.color;\r\n   // ctx.arc(\r\n   //   this.x, this.y, this.radius, 0,  Math.PI\r\n   // );\r\n   // ctx.stroke();\r\n   //  \r\n   dottedArc(ctx, this.x, this.y, this.radius, \r\n      this.normalAngle - Math.PI/2, this.normalAngle + Math.PI/2, this.color);\r\n   if (this.arrowTip.x !== null){\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.setLineDash([5,5]);\r\n     ctx.moveTo(this.x, this.y);\r\n     ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n     ctx.stroke();\r\n     this.drawArrowBits(ctx);\r\n     ctx.beginPath();\r\n        ctx.fillStyle = \"purple\"\r\n        ctx.font = `${21}px Arial`;\r\n        ctx.fillText(`Initial speed: ${(this.arrowLength/4).toFixed(2)}`, \r\n        `${0.5 * (this.x + this.arrowTip.x)}`,\r\n         `${0.5 * (this.y + this.arrowTip.y)}`);\r\n        ctx.fill();\r\n     \r\n   }\r\n}\r\n   drawArrowBits (ctx) {\r\n      let {x, y, arrowTip} = this;\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y -y] );\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta + 3*Math.PI/4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta - 3*Math.PI/4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n    launch(){\r\n       if (this.arrowTip.x === null){\r\n          return false;\r\n       }\r\n       this.game.ball.stopped = false;\r\n       this.game.ball.vx = this.launchVx;\r\n       this.game.ball.vy = this.launchVy;\r\n       return true;\r\n    }\r\n\r\n    setVelocity(event){\r\n\r\n      const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n      const dx = cursor.x - this.x;\r\n      const dy = cursor.y - this.y;\r\n      if (\r\n         dx**2 + dy**2 <= this.radius ** 2 &&\r\n          dx * this.normal[0] + dy * this.normal[1] >= 0\r\n          ) {\r\n             this.arrowTip.x = cursor.x;\r\n             this.arrowTip.y = cursor.y;\r\n\r\n            this.updateLaunchVelocity();\r\n           \r\n            this.updatePolar();\r\n            \r\n         }   \r\n         else {this.arrowTip.x = null;}\r\n    }\r\n    setVelocityByArrowKeys(event){\r\n       const dVx = .1 * Math.cos(this.arrowAngle);\r\n       const dVy = .1 * Math.sin(this.arrowAngle);\r\n\r\n       if (event.keyCode === 40){\r\n         //  this.launchVx -= dVx;        \r\n         //  this.launchVy -= dVy;        \r\n         //  this.arrowTip.x -= 4 * dVx;\r\n         //  this.arrowTip.y -= 4 * dVy;\r\n         this.arrowLength -= .5;\r\n       }\r\n       if (event.keyCode === 38){\r\n         //  this.launchVx += dVx;\r\n         //  this.launchVy += dVy;\r\n         //  this.arrowTip.x = 4 * this.launchVx + this.x;\r\n         //  this.arrowTip.y = 4 * this.launchVx + this.y;\r\n         this.arrowLength += .5;\r\n       }\r\n      //  this.updateLaunchVelocity();\r\n      //  const arrowLength = \r\n      //    Math.sqrt((this.arrowTip.x-this.x)**2 + (this.arrowTip.y - this.y)**2);\r\n       if (event.keyCode === 37){\r\n          this.arrowAngle -= .02;\r\n         //  this.arrowTip.x = this.x + arrowLength * Math.cos(this.arrowAngle);\r\n         //  this.arrowTip.y = this.y + arrowLength * Math.sin(this.arrowAngle);\r\n         //  this.launchVx = .25 * (this.arrowTip.x -this.x);\r\n         //  this.launchVy = .25 * (this.arrowTip.y -this.y);\r\n       }\r\n       if (event.keyCode === 39){\r\n          this.arrowAngle += .02;\r\n         //  this.arrowTip.x = this.x + arrowLength * Math.cos(this.arrowAngle);\r\n         //  this.arrowTip.y = this.y + arrowLength * Math.sin(this.arrowAngle);\r\n         //  this.launchVx = .25 * (this.arrowTip.x -this.x);\r\n         //  this.launchVy = .25 * (this.arrowTip.y -this.y);\r\n       }\r\n       this.updateArrowTip();\r\n       this.updateLaunchVelocity();\r\n       \r\n\r\n    }\r\n   }\r\n\r\n\r\n   export default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, color = \"white\", vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        // this.logging = true;\r\n    }\r\n    \r\n    checkRectangle(corners){\r\n        const {x, y} = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    move(){\r\n        if(this.logging){\r\n            console.log(`ballx is ${this.x}`);\r\n            console.log(`bally is ${this.y}`);\r\n        }\r\n        \r\n\r\n        if (!this.stopped){\r\n            this.x += this.game.ballSpeedMultiplier*this.vx;\r\n            this.y += this.game.ballSpeedMultiplier* this.vy;\r\n            this.vx += this.ax;\r\n            this.vy +=this.ay;\r\n            \r\n\r\n            if (Math.abs(this.vx) + Math.abs(this.vy) < 0.4\r\n            && Math.abs(this.ax) + Math.abs(this.ay) <0.1){\r\n                this.stopped = true;}\r\n            this.ax = 0;\r\n            this.ay = 0;\r\n            \r\n            this.game.planets.forEach(planet => {\r\n                const {dx, dy, dz2, dz, normal} = planet.ballData();\r\n                if (dz <=  this.radius + planet.radius){\r\n                    let error = this.radius + planet.radius - dz;\r\n                    this.x += error * normal[0];\r\n                    this.y += error * normal[1];\r\n                    this.ax = 0;\r\n                    this.ay = 0;\r\n                  if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy)<1 ){\r\n                      this.stopped = true;\r\n                    this.game.currentPlanet = planet;\r\n                    this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal);\r\n                    this.game.setupLaunchPad();\r\n                }\r\n                  else{planet.bounce(normal);}\r\n                    \r\n                }\r\n                else{\r\n                this.ax -= (1/dz2)*planet.mass * dx/dz * .2;\r\n                this.ay -= (1/dz2)*planet.mass * dy/dz * .2;\r\n                } \r\n        });\r\n        this.game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()){\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n    };\r\n    \r\n    }\r\n    draw(ctx ) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.x, this.y, this.radius, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n    constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.density = density || 1;\r\n        this.mass = this.density * this.radius**3;\r\n        this.sticky = true;\r\n    }\r\n\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    ballData(){\r\n      const ball = this.game.ball;\r\n      const dx = ball.x - this.x;\r\n      const dy = ball.y - this.y;\r\n      const dz2 = ((dx)**2 + (dy)**2);\r\n      const dz = Math.sqrt(dz2);\r\n      const normal = [dx/dz, dy/dz];\r\n      return {dx, dy, dz2, dz, normal}\r\n  }\r\n\r\n    draw(ctx ) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.x, this.y, this.radius, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.font = `${Math.floor(.9 * this.radius)}px Arial`;\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `${14}px Arial`;\r\n        ctx.fillText(`Escape vel. approx. ${(this.radius * this.density **.45 *.504 ).toFixed(2)}`, \r\n        `${this.x +  this.radius + 2}`,\r\n         `${this.y + .5 * this.radius}`);\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default StickyPlanet;","import {intervalsIntersect} from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\"){\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1-y2)**2 + (x2 - x1)**2)\r\n        this.normal = [(y1 - y2)/z, (x2- x1)/z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n    }\r\n    bounce(){\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n    checkForBall(){\r\n        \r\n        let ball = this.game.ball;\r\n        ball.logging = false;\r\n        let {x1, x2, y1, y2} = this;\r\n        let normal = [y1-y2, x2-x1]\r\n        let {x, y, radius, vx, vy} = ball;\r\n        // if (x - radius > Math.max(x1, x2) || x + radius < Math.min(x1, x2)){\r\n        //     return false;\r\n        // }\r\n        // if (y - radius > Math.max(y1, y2) || y + radius < Math.min(y1, y2)){\r\n        //     return false;\r\n        // }\r\n        // let d = ((y2-y1)*x - (x2-x1)*y+x2*y1-y2*x1)/Math.sqrt((y2-y1)**2 + (x2-x1)**2);\r\n        // let result = -1.5*radius <= d && 1.5*radius >= d;\r\n        // if (result) {\r\n        // return result;\r\n        // }\r\n        let perpComponent = normal[0] * (x - x1) + normal[1]*(y-y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1]*(y+vy-y1);\r\n        return perpComponent * nextPerpComponent <= 0 \r\n        && intervalsIntersect([x, x+vx], [x1, x2]) \r\n        && intervalsIntersect([y, y+vy], [y1, y2]);\r\n    }\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n    draw(ctx ) {\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x1, this.y1);\r\n        ctx.lineTo(this.x2, this.y2);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n      };\r\n}\r\n\r\nexport default Obstacle;","import {intervalsIntersect} from './helper';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0,1], width = 100){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag= this.drawFlag.bind(this);\r\n        this.drawHole= this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n \r\n   move(){\r\n       this.x += this.vx;\r\n       this.y += this.vy;\r\n   }\r\n\r\n   drawFlag(ctx ) {\r\n       let x = this.x;\r\n       let y = this.y;\r\n       ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"gold\";\r\n      ctx.moveTo(x, y);\r\n      ctx.lineTo(x, y - 50)\r\n       ctx.stroke();\r\n       ctx.fillStyle = \"red\";\r\n       ctx.moveTo(x, y-50);\r\n       ctx.lineTo(x,y-70);\r\n       ctx.lineTo(x+ 25, y-60);\r\n       ctx.lineTo(x, y-50);\r\n       ctx.fill();\r\n     }\r\n     drawHole(ctx) {\r\n         let {x, y, width} = this;\r\n         let ball = this.game.ball;\r\n             ctx.beginPath();\r\n             ctx.strokeStyle = \"purple\";\r\n             ctx.moveTo(x - width/2, y);\r\n             ctx.lineTo(x + width/2, y);\r\n             ctx.stroke();\r\n             ctx.beginPath();\r\n             ctx.fillStyle = \"black\";\r\n             ctx.moveTo(x + width/2, y);\r\n             ctx.lineTo(x + width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y + 30);\r\n             ctx.lineTo(x - width/2, y );\r\n             ctx.fill();\r\n         \r\n\r\n        }\r\n        checkForWin(){\r\n            let {x, y, width, normal} = this;\r\n            let ball = this.game.ball;\r\n            // let result = ball.y -ball.radius> y \r\n            // && ball.y-2*ball.radius < y\r\n            // && Math.abs(ball.x - x) < width/2\r\n            // && ball.vy >0;\r\n            \r\n            // return result;\r\n\r\n            let perpComponent = normal[0] * (ball.x - x) + normal[1]*(ball.y-y);\r\n            let nextPerpComponent = normal[0] * (ball.x + ball.vx - x) + normal[1]*(ball.y+ball.vy-y);\r\n            return perpComponent * nextPerpComponent <= 0 \r\n            && intervalsIntersect([ball.x, ball.x+ball.vx], [x - 0.5 * width* normal[1], x+ 0.5* width * normal[1]]) \r\n            && intervalsIntersect([ball.y, ball.y+ball.vy], [y - 0.5 * width* normal[0], y + 0.5 * width * normal[0]]);\r\n        }\r\n \r\n    \r\n     \r\n    }\r\n \r\n    export default Hole;\r\n ","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level1 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [1200, 900]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 490, 20, \"orange\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 670, 450,  [0,1], 100);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 680, 420),\r\n            new Obstacle(game, 360, 150, 710, 410)\r\n        ]\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 300, 100);\r\n        this.currentPlanet = new StickyPlanet(game, 300, 70, 25, \"#27753a\", .4);\r\n        this.corners = [[-200, -200], [1200, 900]];\r\n        this.launchPad = new LaunchPad(game, 300, 100);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 520, 250, 30, \"orange\"),\r\n            new StickyPlanet(game, 580, 450, 30, \"orange\"),\r\n\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 700, 500);\r\n        this.obstacles=[];\r\n        this.obstacles = [\r\n            new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 600, 40, 850, 300)\r\n        ]\r\n        }\r\n}\r\n\r\nexport default Level2;","import Ball from './ball';\r\nimport LaunchPad from './launchpad';\r\nimport StickyPlanet from './Sticky_planet';\r\nimport Obstacle from './obstacle';\r\nimport BouncyPlanet from './bouncy_planet';\r\nimport Hole from './hole';\r\nimport Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.levels = [null, Level1, Level2];\r\n        this.currentLevelNumber = 0;\r\n        this.ballSpeedMultiplier=1;\r\n       \r\n        // this.ball = new Ball(this, 300, 100);\r\n        // this.currentPlanet = new StickyPlanet(this, 300, 70, 25, \"#27753a\", .4);\r\n\r\n        // this.launchPad = new LaunchPad(this, 300, 100);\r\n        // this.planets = [\r\n        //     this.currentPlanet,\r\n        //     new StickyPlanet(this, 300, 400, 35), \r\n        //     new StickyPlanet(this, 520, 250, 30, \"orange\"),\r\n        //     new StickyPlanet(this, 620, 450, 30, \"orange\"),\r\n\r\n            \r\n        // ]\r\n        // this.hole = new Hole(this, 700, 600);\r\n        // this.obstacles=[];\r\n        // this.obstacles = [\r\n        //     new Obstacle(this, 90, 0, 90, 900)   ,\r\n        //     new Obstacle(this, 600, 40, 850, 300)\r\n        // ];\r\n        \r\n\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n    }\r\n\r\n    initiateLevel() {\r\n\r\n        this.currentLevelNumber += 1;\r\n        if (this.currentLevelNumber >= this.levels.length){\r\n            this.ball.stopped = true;\r\n            return this.victoryMessage();\r\n        }\r\n        const level = new this.levels[this.currentLevelNumber](this);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets=level.planets;\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles;\r\n        this.corners = level.corners;\r\n        this.setupLaunchPad();\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    victoryMessage(){\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!', \r\n       400, 400);\r\n        ctx.fill();\r\n    }\r\n        \r\n    setupLaunchPad(){\r\n        let func = e => this.launchPad.setVelocity(e);\r\n        let game = this;\r\n        this.canvas.addEventListener(\"mousemove\", func, false);\r\n        let aFunc = e => {\r\n            game.canvas.removeEventListener('mousemove', func, false);\r\n            game.launchPad.setVelocityByArrowKeys(e);\r\n            console.log(game);\r\n        }\r\n\r\n        // this.canvas.addEventListener(\"keydown\", e => aFunc(e));\r\n        this.canvas.onkeydown = aFunc;\r\n        this.canvas.addEventListener(\r\n            \"click\",\r\n            e => {if (this.launchPad.launch()){\r\n                this.canvas.removeEventListener('mousemove', func);\r\n            }\r\n            })\r\n    }\r\n    \r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n    }\r\n\r\n    moveObjects() {\r\n        this.ball.move();\r\n        if (!this.ball.checkRectangle(this.corners)){\r\n            this.restartLevel();\r\n        }\r\n    }\r\n    animate(time) {\r\n        if (this.hole.checkForWin()){\r\n            this.ball.stopped = true;\r\n            return this.initiateLevel();\r\n        }\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        this.draw();\r\n        this.lastTime = time;\r\n\r\n        // every call to animate requests causes another call to animate\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n    draw() {\r\n        let ctx=this.ctx;\r\n        ctx.width = 1200;\r\n        ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fillRect(0, 0, 1000, 600);\r\n        this.launchPad.draw(ctx);\r\n        this.hole.drawFlag(ctx);\r\n        this.ball.draw(ctx);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx));\r\n        this.hole.drawHole(ctx);\r\n        this.planets.forEach(planet => planet.draw(ctx));\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.initiateLevel();\r\n});\r\n"],"sourceRoot":""}