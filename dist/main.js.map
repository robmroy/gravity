{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/fast-random/index.js","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/timedMessage.js","webpack:///./src/hole.js","webpack:///./src/start_button.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/levels/level3.js","webpack:///./src/levels/level4.js","webpack:///./src/levels/level5.js","webpack:///./src/obstacles.js","webpack:///./src/levels/level6.js","webpack:///./src/levels/level7.js","webpack:///./src/levels/level8.js","webpack:///./src/viewport.js","webpack:///./src/stars.js","webpack:///./src/menu.js","webpack:///./src/level_menu/level_display.js","webpack:///./src/level_menu/level_menu.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","seed","_seed","_nextInt","nextInt","nextFloat","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","vectorLength","sqrt","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","maxTheta","this","draw","move","launch","arrowVector","updatePolar","updateArrowTip","updateLaunchVelocity","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","arrowLength","thetaRestrictionHelper","cos","sin","setVelocityByArrowKeys","vx","vy","vp","displayPos","x1","y1","vpX","vpY","currentPlanet","hideText","console","log","setLineDash","moveTo","lineTo","drawArrowBits","textX","textY","fillStyle","font","fillText","toFixed","fill","ball","textPos","stopped","event","cursor","clientX","clientY","dx","dy","dz","callback","al","keyCode","max","min","includes","src_ball","ax","ay","prevx","prevy","drawX","drawY","interpolateX","interpolateY","playSpeed","fractional","num","residue","frameCount","corners","logging","planets","forEach","planet","dz2","ballData","error","sticky","abs","stop","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","hole","checkForWin","currentLevelNumber","levels","length","won","initiateLevel","undefined","setAuxPositions","Sticky_planet","density","floor","x2","y2","z","vDotNormal","new_vx","new_vy","viewport","timedMessage","text","duration","width","scale","drawFlag","drawHole","a","prevPerpComponent","perpComponent","timedMessages","push","start_button_error","start_button","clickHandler","canvas","addEventListener","visible","removeEventListener","menu","level1","viewportMovementStartX","viewportMovementStartY","level2","level3","invSqrt","level4","level5","polyFromFunction","f","g","b","step","t0","t1","result","obst","level6","ellipse1","ellipse2","concat","level7","ellipse","level8","zoom","setMovementStart","setMovementStartPoints","moveWithBall","up","right","down","left","startUp","startRight","startDown","startLeft","ballX","ballY","ballOvershoot","catchupX","catchupY","pojo","src_stars","level","topLeft","bottomRight","blocks","starsPerBlock","xInThousands","yInThousands","frandom","fast_random_default","stars","Array","startButton","level_display","orb","level_menu","slice","levelDisplays","map","lvl","idx","ld","src_game","setAttribute","getContext","animating","setPlaySpeed","restartLevel","levelControl","switchToLevelMenu","window","printo","requestAnimationFrame","animate","menuReady","levelMenu","height","clearRect","generateBlock","viewportMovementUp","viewportMovementRight","viewportMovementDown","viewportMovementLeft","setVelocityWithMouse","e","launchBallWithMouse","keyDownHandler","arrowCodes","disableLaunchPad","delta","moveObjects","message","filter","checkRectangle","time","timeDelta","lastTime","j","getBlock","drawBlock","victoryMessage"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function random(seed) {\r\n\tfunction _seed(s) {\r\n\t\tif ((seed = (s|0) % 2147483647) <= 0) {\r\n\t\t\tseed += 2147483646;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _nextInt() {\r\n\t\treturn seed = seed * 48271 % 2147483647;\r\n\t}\r\n\r\n\tfunction _nextFloat() {\r\n\t\treturn (_nextInt() - 1) / 2147483646;\r\n\t}\r\n\r\n\t_seed(seed);\r\n\r\n\treturn {\r\n\t\tseed: _seed,\r\n\t\tnextInt: _nextInt,\r\n\t\tnextFloat: _nextFloat\r\n\t};\r\n}\r\n\r\nmodule.exports = random;\r\n","export const dottedArc = function(ctx, x, y, radius, theta0, theta1, color){\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2* Math.ceil(.5*(theta/a - 1)) + 1;\r\n    let dTheta = theta/numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i=0; i < numPieces; i++){ \r\n        ctx.beginPath();\r\n        if (i % 2 == 0){\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i*dTheta, theta0+(i+1)*dTheta \r\n                );\r\n                ctx.stroke();\r\n            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const vectorAngle = function(vector){\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x==0){\r\n        return y > 0 ? Math.PI/2 : -Math.PI/2;\r\n    }\r\n    \r\n    return x > 0 ? Math.atan(y/x) : Math.PI + Math.atan(y/x);\r\n    \r\n}\r\n\r\nexport const vectorLength = function(vector){\r\n    return Math.sqrt(vector[0] ** 2 + vector[1] ** 2);\r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2){\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1)*(a2-a1) <= 0 ||  (b2 - b1)*(a2-b1) <= 0\r\n    || (b1 - a2) * (a1-a2) <=0 || (b1 - b2) * (a1-b2) <=0;\r\n}\r\n","import {dottedArc, vectorAngle, vectorLength} from './helper';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0,1],  maxTheta = Math.PI/2, radius = 160, color = \"white\"){\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw= this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.arrowVector = this.arrowVector.bind(this);\r\n      this.updatePolar = this.updatePolar.bind(this);\r\n      this.updateArrowTip = this.updateArrowTip.bind(this);\r\n      this.updateLaunchVelocity = this.updateLaunchVelocity.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy=0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = {x: null, y: null};\r\n      this.arrowAngle = this.normalAngle;\r\n      this.arrowLength = 60;\r\n      this.maxTheta = maxTheta;\r\n      this.thetaRestrictionHelper = (1-Math.cos(maxTheta))**2 + (Math.sin(maxTheta))**2;\r\n      this.setVelocityByArrowKeys = this.setVelocityByArrowKeys.bind(this);\r\n  }\r\n\r\n  move(){\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n  }\r\n\r\n  vpX(){\r\n    return this.game.vp.displayPos(this).x;\r\n   }\r\n   vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n   }\r\n\r\n  arrowVector(){\r\n     const vp = this.game.vp;\r\n     return [this.arrowTip.x-this.x + vp.x1, this.arrowTip.y-this.y + vp.y1];\r\n  }\r\n  updatePolar(){\r\n   this.arrowLength = vectorLength(this.arrowVector());\r\n   this.arrowAngle = vectorAngle(this.arrowVector());\r\n  }\r\n  updateArrowTip(){\r\n     let vp = this.game.vp;\r\n     this.arrowTip.x = this.x -vp.x1 + this.arrowLength*Math.cos(this.arrowAngle);\r\n     this.arrowTip.y = this.y - vp.y1 + this.arrowLength*Math.sin(this.arrowAngle);\r\n  }\r\n  updateLaunchVelocity(){\r\n     this.launchVx = this.arrowVector()[0]/8;\r\n     this.launchVy = this.arrowVector()[1]/8;\r\n  }\r\n  draw(ctx) {\r\n   let x = this.vpX();\r\n   let y = this.vpY();\r\n   dottedArc(ctx, x, y, this.radius, \r\n      this.normalAngle - this.maxTheta, this.normalAngle +this.maxTheta, this.color);\r\n      let currentPlanet = this.game.currentPlanet;\r\n      if(this.arrowTip.x === null){currentPlanet.hideText = false;}\r\n   if (this.arrowTip.x !== null){\r\n      console.log('line 71')\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"white\";\r\n      ctx.setLineDash([5,5]);\r\n     ctx.moveTo(x, y);\r\n     ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n     ctx.stroke();\r\n     this.drawArrowBits(ctx);\r\n     ctx.beginPath();\r\n      let textX = 0.5 * (x + this.arrowTip.x);\r\n      let textY = 0.5 * (y + this.arrowTip.y);\r\n        ctx.fillStyle = \"purple\"\r\n        ctx.font = `${21}px Arial`;\r\n        ctx.fillText(`Initial speed: ${(this.arrowLength/8).toFixed(2)}`, \r\n        `${textX}`,\r\n         `${textY}`);\r\n        ctx.fill();\r\n        let vp = this.game.vp;\r\n        let ball = this.game.ball;\r\n        if (textX  >=currentPlanet.textPos.x - vp.x1 - 150  && \r\n           textY >= currentPlanet.textPos.y - vp.y1 - 28 + ball.radius  &&\r\n         textY  <= currentPlanet.textPos.y - vp.y1 + 8 + ball.radius){\r\n            currentPlanet.hideText = true;\r\n         }\r\n         else { currentPlanet.hideText = false;}\r\n     \r\n   }\r\n}\r\n   drawArrowBits(ctx) {\r\n      let {x, y, arrowTip, game} = this;\r\n       x -= game.vp.x1;\r\n      y-= game.vp.y1;\r\n\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y -y] );\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta + 3*Math.PI/4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3*Math.PI/4), \r\n         arrowTip.y + 12* Math.sin(theta - 3*Math.PI/4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n    launch(){\r\n       if (this.arrowTip.x === null){\r\n          return false;\r\n       }\r\n       this.game.ball.stopped = false;\r\n       this.game.ball.vx = this.launchVx;\r\n       this.game.ball.vy = this.launchVy;\r\n       return true;\r\n    }\r\n\r\n    setVelocity(event){\r\n      const vp = this.game.vp;\r\n      const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n      const dx = cursor.x - this.x +vp.x1;\r\n      const dy = cursor.y - this.y + vp.y1;\r\n      const dz = Math.sqrt(dx**2 + dy**2);\r\n      // console.log(`normal: ${this.normal}`);\r\n      // console.log(`trh: ${this.thetaRestrictionHelper}`);\r\n      // console.log(`dx, dy:${[dx, dy]}`);\r\n      if (\r\n         dx**2 + dy**2 <= this.radius ** 2 &&\r\n         (this.normal[0] - dx/dz)**2 + (this.normal[1] - dy/dz)**2 <= this.thetaRestrictionHelper\r\n          ) {\r\n             this.arrowTip.x = cursor.x;\r\n             this.arrowTip.y = cursor.y;\r\n            this.updateLaunchVelocity();\r\n           \r\n            this.updatePolar();\r\n            \r\n         }   \r\n         else {\r\n         this.arrowTip.x = null;}\r\n    }\r\n    setVelocityByArrowKeys(event, callback){\r\n       const al = this.arrowLength;\r\n       if (event.keyCode === 40){\r\n         this.arrowLength = Math.max(al -.4, 0);\r\n       }\r\n       if (event.keyCode === 38){\r\n         this.arrowLength = Math.min(al + .4, this.radius);\r\n       }\r\n       if (event.keyCode === 37){\r\n          this.arrowAngle -= .004;\r\n       }\r\n       if (event.keyCode === 39){\r\n          this.arrowAngle += .004;\r\n      }\r\n      if ([32,13].includes(event.keyCode)){\r\n         if (this.launch()){\r\n            callback();\r\n         }\r\n       }\r\n       this.updateArrowTip();\r\n       this.updateLaunchVelocity();\r\n       \r\n    }\r\n   }\r\n\r\n   export default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, color = \"white\", vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        this.prevx =x ;\r\n        this.prevy = y;\r\n        this.drawX = x;\r\n        this.drawY = y;\r\n        this.interpolateX = x;\r\n        this.interpolateY = y;\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n\r\n    setAuxPositions(){\r\n        const playSpeed = this.game.playSpeed;\r\n        const vp = this.game.vp;\r\n        if (playSpeed.fractional && playSpeed.num > 1){\r\n            const num = playSpeed.num;\r\n            const residue = this.game.frameCount % num;\r\n            this.interpolateX =   (residue/num) * this.x + (1 - residue/num) * this.prevx;\r\n            this.interpolateY = (residue/num) * this.y + (1 - residue/num) * this.prevy; \r\n        }\r\n        else {\r\n            this.interpolateX = this.x;\r\n            this.interpolateY = this.y ;\r\n        }\r\n        this.drawX = this.interpolateX - vp.x1;\r\n         this.drawY = this.interpolateY - vp.y1;\r\n    }\r\n    \r\n    checkRectangle(corners){\r\n        const {x, y} = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    stop(){\r\n        this.stopped = true;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n    }\r\n    move(){\r\n        if(this.logging){\r\n            console.log(`ballx is ${this.x}`);\r\n            console.log(`bally is ${this.y}`);\r\n        }\r\n\r\n        this.prevx = this.x;\r\n        this.prevy = this.y;\r\n        if (this.stopped) return;\r\n        this.x += this.vx;\r\n        this.y +=  this.vy;\r\n        this.vx +=  this.ax;\r\n        this.vy +=  this.ay;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n            \r\n        this.game.planets.forEach(planet => {\r\n            const {dx, dy, dz2, dz, normal} = planet.ballData();\r\n            if (dz <=  this.radius + planet.radius){\r\n                let error = this.radius + planet.radius - dz;\r\n                this.x += error * normal[0];\r\n                this.y += error * normal[1];\r\n                this.ax = 0;\r\n                this.ay = 0;\r\n                if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy)<1 ){\r\n                    this.stop();\r\n                this.game.currentPlanet = planet;\r\n                this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal, planet.maxTheta );\r\n                this.game.setupLaunchPad();\r\n            }\r\n                else{planet.bounce(normal);}\r\n                \r\n            }\r\n            else{\r\n            this.ax -= (1/dz2)*planet.mass * dx/dz * .2;\r\n            this.ay -= (1/dz2)*planet.mass * dy/dz * .2;\r\n            } \r\n        });\r\n        const game = this.game;\r\n        game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()){\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n        if (game.hole.checkForWin()){\r\n            this.stop();\r\n            if(game.currentLevelNumber >= game.levels.length - 1){\r\n                game.won = true;}\r\n                else{\r\n                game.initiateLevel();\r\n                game.playSpeed = {num: 1, fractional: false};\r\n                }\r\n        }\r\n    \r\n    \r\n    }\r\n    draw(ctx,  x, y, r = this.radius ) {\r\n        if(x === undefined) {this.setAuxPositions();\r\n        x = this.drawX;\r\n        y=this.drawY;}\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x, y, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n      };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n    constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, maxTheta=Math.PI/2,vx=0, vy=0){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.density = density || 1;\r\n        this.mass = this.density * this.radius**3;\r\n        this.sticky = true;\r\n        this.hideText = false;\r\n        this.maxTheta = maxTheta;\r\n        this.textPos={x: x + radius + 2, y: y+ radius + .5};\r\n    }\r\n\r\n    vpX(){\r\n      return this.game.vp.displayPos(this).x;\r\n  }\r\n\r\n  vpY(){\r\n      return this.game.vp.displayPos(this).y;\r\n  }\r\n\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    ballData(){\r\n      const ball = this.game.ball;\r\n      const dx = ball.x - this.x;\r\n      const dy = ball.y - this.y;\r\n      const dz2 = ((dx)**2 + (dy)**2);\r\n      const dz = Math.sqrt(dz2);\r\n      const normal = [dx/dz, dy/dz];\r\n      return {dx, dy, dz2, dz, normal}\r\n  }\r\n\r\n    draw(ctx, x = this.x, y = this.y, r = this.radius ) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          x, y, r, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n        ctx.fill();\r\n        if (!this.hideText){\r\n          ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `${14}px Arial`;\r\n        ctx.fillText(`Escape vel. ${(this.radius * this.density **.45 *.504 ).toFixed(2)}`, \r\n        `${x +  r + 2}`,\r\n         `${y + .5 * r + this.game.ball.radius}`);\r\n        ctx.fill();\r\n      };\r\n    }\r\n}\r\n\r\nexport default StickyPlanet;","import {intervalsIntersect} from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\"){\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw= this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1-y2)**2 + (x2 - x1)**2)\r\n        this.normal = [(y1 - y2)/z, (x2- x1)/z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n    }\r\n    bounce(){\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n    checkForBall(){\r\n        \r\n        let ball = this.game.ball;\r\n        ball.logging = false;\r\n        let {x1, x2, y1, y2} = this;\r\n        let normal = [y1-y2, x2-x1]\r\n        let {x, y, radius, vx, vy} = ball;\r\n        // if (x - radius > Math.max(x1, x2) || x + radius < Math.min(x1, x2)){\r\n        //     return false;\r\n        // }\r\n        // if (y - radius > Math.max(y1, y2) || y + radius < Math.min(y1, y2)){\r\n        //     return false;\r\n        // }\r\n        // let d = ((y2-y1)*x - (x2-x1)*y+x2*y1-y2*x1)/Math.sqrt((y2-y1)**2 + (x2-x1)**2);\r\n        // let result = -1.5*radius <= d && 1.5*radius >= d;\r\n        // if (result) {\r\n        // return result;\r\n        // }\r\n        let perpComponent = normal[0] * (x - x1) + normal[1]*(y-y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1]*(y+vy-y1);\r\n        return perpComponent * nextPerpComponent <= 0 \r\n        && intervalsIntersect([x, x+vx], [x1, x2]) \r\n        && intervalsIntersect([y, y+vy], [y1, y2]);\r\n    }\r\n    move(){\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n    draw(ctx, viewport ) {\r\n        let {x1, y1} = viewport;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.x1 - x1, this.y1 - y1);\r\n        ctx.lineTo(this.x2 - x1, this.y2 - y1);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n      };\r\n}\r\n\r\nexport default Obstacle;","class TimedMessage{\r\n    constructor(text, duration = 60, color, font = '30px Arial', x = 400, y = 300) {\r\n        this.text = text;\r\n        this.duration = duration;\r\n        this.font = font;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color || \"#3e78ad\";\r\n    }\r\n\r\n    draw(ctx){\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.font = this.font;\r\n        ctx.fillText(this.text, \r\n        this.x,\r\n        this.y);\r\n        ctx.fill();\r\n    }\r\n}\r\n\r\nexport default TimedMessage;","import {intervalsIntersect} from './helper';\r\nimport TimedMessage from './timedMessage';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0,-1], width = 100, scale = 1){\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag= this.drawFlag.bind(this);\r\n        this.drawHole= this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n\r\n    vpX(){\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY(){\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n \r\n   move(){\r\n       this.x += this.vx;\r\n       this.y += this.vy;\r\n   }\r\n\r\n   drawFlag(ctx, x = this.x, y = this.y, scale=1) {\r\n       let normal = this.normal;\r\n       let a = scale;\r\n       ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = \"gold\";\r\n      ctx.moveTo(x, y);\r\n      ctx.lineTo(x + a* 50* normal[0] , y + a*50 * normal[1])\r\n       ctx.stroke();\r\n       ctx.fillStyle = \"#db0711\";\r\n       ctx.moveTo(x + a*50* normal[0] , y + a* 50 * normal[1]);\r\n       ctx.lineTo(x + a*70* normal[0] , y + a*70 * normal[1]);\r\n       ctx.lineTo(x + a*60* normal[0] - a*30* normal[1], y + a*60 * normal[1] + a*30 * normal[0]);\r\n       ctx.lineTo(x + a*50* normal[0] , y + a*50 * normal[1]);\r\n       ctx.fill();\r\n     }\r\n     drawHole(ctx, x = this.x, y = this.y, scale =1 ) {\r\n         let {width, normal} = this;\r\n         let a = scale;\r\n             ctx.beginPath();\r\n             ctx.strokeStyle = \"purple\";\r\n             ctx.moveTo(x - a*normal[1] * width/2 , y + a*normal[0] * width/2 );\r\n             ctx.lineTo(x +  a*normal[1] * width/2, y - a*normal[0] * width/2);\r\n             ctx.stroke();\r\n             ctx.beginPath();\r\n\r\n        }\r\n        checkForWin(){\r\n            let {x, y, width, normal} = this;\r\n            let ball = this.game.ball;\r\n\r\n            let prevPerpComponent = normal[0] * (ball.prevx - x) + normal[1]*(ball.prevy-y);\r\n            let perpComponent = normal[0] * (ball.x - x) + normal[1]*(ball.y-y);\r\n            if( intervalsIntersect([ ball.prevx, ball.x], [x - 0.5 * width* normal[1], x+ 0.5* width * normal[1]]) \r\n            && intervalsIntersect([ ball.prevy, ball.y], [y - 0.5 * width* normal[0], y + 0.5 * width* normal[0]])\r\n            ){\r\n                if (prevPerpComponent >= 0  && perpComponent <= 0) return true;\r\n                if (prevPerpComponent < 0 && perpComponent > 0) this.game.timedMessages.push(\r\n                    new TimedMessage(\"WRONG WAY\", 80, \"#9c1c22\", '28px Trebuchet MS', this.x, this.y + 70)\r\n                    );\r\n            }\r\n            return false;\r\n        }\r\n \r\n    \r\n     \r\n    }\r\n \r\n    export default Hole;\r\n ","const error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\nclass StartButton{\r\n    constructor(game, x, y, color = 'black'){\r\n        this.game = game;\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        game.canvas.addEventListener(\"click\", this.clickHandler);\r\n        this.visible = true;\r\n        this.x =x;\r\n        this.y = y;\r\n        this.color = color;\r\n    }\r\n    draw(ctx){\r\n        if(this.visible){\r\n            ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.font = `${25}px Arial`;\r\n        ctx.fillText(`Start`, \r\n       this.x, this.y);\r\n        ctx.fill();\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = this.color;\r\n            ctx.moveTo(this.x - 20, this.y+10);\r\n            ctx.lineTo(this.x - 20, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y + 10 );\r\n            ctx.lineTo(this.x - 20, this.y + 10);\r\n            ctx.stroke();\r\n        }\r\n\r\n    }\r\n    clickHandler(event){\r\n        const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n        if (\r\n            cursor.x >= this.x -20 && cursor.x <= this.x + 75\r\n            && cursor.y >=this.y - 25 && cursor.y <= this.y + 10\r\n            ){\r\n                this.game.setupLaunchPad();\r\n                this.game.canvas.removeEventListener(\"click\", this.clickHandler, false);\r\n                this.visible = false;\r\n                this.game.menu = null;\r\n            }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default StartButton;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level1 {\r\n    constructor(game){\r\n        this.ball = new Ball(game, 300 + 25 + 5, 240 );\r\n        this.corners = [[-200, -200], [1200, 600]];\r\n        this.currentPlanet = new StickyPlanet(game, 300, 240, 25, \"#27753a\", 1);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            // new StickyPlanet(game, 640, 490, 22, \"white\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 680, 435,  [0,-1], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 750, 500),\r\n            new Obstacle(game, 750, 150, 750, 500)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 600, 440);\r\n        this.currentPlanet = new StickyPlanet(game, 600, 470, 25, \"#27753a\", 1);\r\n        this.corners = [[-200, -800], [2400, 1900]];\r\n        this.launchPad = new LaunchPad(game, 600, 440, [0, -1]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 640, 320);\r\n        this.obstacles=[];\r\n        \r\n        }\r\n}\r\n\r\nexport default Level2;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport Hole from '../hole';\r\nclass Level3 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 640, 490, 22, \"orange\", 2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 420,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            new Obstacle(game, 250, 150, 640, 340),\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level3;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level4 {\r\n    constructor(game){\r\n        const sqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 560 + (25 + 5), 245);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 560, 245, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 280, 20, \"orange\", 1),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 665, 330,   [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 250, 280, 640, 280),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level4;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level5 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 200 + (35+ 5)*invSqrt, 380 - (35 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 200, 380, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, -invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 330,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            // new Obstacle(game, 250, 150, 640, 300),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level5;","import Obstacle from './obstacle';\r\n\r\nexport const polyFromFunction = function(game, f, g, a, b, step){\r\n    let [t0, t1] = [a, a+ step];\r\n    let result = [];\r\n    while( t1 <= b + .01){\r\n        const obst = new Obstacle(game, f(t0), g(t0), f(t1), g(t1));\r\n        t0 += step;\r\n        t1 += step;\r\n        result.push(obst);\r\n    }\r\n    return result;\r\n}","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level6 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 150 + 5 + 35, 190 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 150, 190, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            // new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 400, 390,  [sqrt,-sqrt], 100);\r\n        const ellipse1 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), -Math.PI/4 + .5, Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse1).concat(ellipse2);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level6;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level7 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 185, 260 - 12 - 5 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 185, 260, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [0, -1],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 650, 290, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 500, 340, 35, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 535, 270,  [-1, 0], 100);\r\n        const ellipse = polyFromFunction(game,\r\n            t => 530+  26* t * Math.sin(t), t => 330 + 27 * t* Math.cos(t), 3.5, 17, Math.PI/100);\r\n        this.obstacles = [\r\n        ]\r\n\r\n        this.obstacles.push(...ellipse);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level7;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level8 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 350 + (12 + 5)*invSqrt, 120 + (12 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 350, 120, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 1050, 300, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 820, 300, 45, \"orange\", 3),\r\n            new StickyPlanet(game, 500, 230, 50, \"orange\", .2),\r\n            // new StickyPlanet(game, 520, 280, 40, \"orange\", 1),\r\n            new StickyPlanet(game, 500, 310, 15, \"orange\", 10),\r\n            \r\n        ]\r\n        // const ellipse1 = polyFromFunction(game,\r\n        //     t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 800+ 300* Math.sin(t), t => 300 + 120* Math.cos(t), -0, 1.01 * Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse2);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 1050, 300,  [-1, 0], 100);\r\n\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level8;","class Viewport {\r\n    constructor(x1 = 0, y1 =0, x2 = 1200 + x1, y2 = 600 + y1, zoom =100){\r\n        this.x1 = x1;\r\n        this.y1= y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.zoom = zoom;\r\n        this.setMovementStart = this.setMovementStartPoints.bind(this);\r\n        this.moveWithBall = this.moveWithBall.bind(this);\r\n    }\r\n    setMovementStartPoints(up, right, down, left){\r\n        this.startUp = up || 0;\r\n        this.startRight = right || 1100;\r\n        this.startDown = down || 530;\r\n        this.startLeft = left || 0;\r\n    }\r\n    moveWithBall(ballX, ballY, ball){\r\n    \r\n        let {x1, x2, y1, y2} = this;\r\n        let ballOvershoot = {x: ballX - .5*(x1+x2), y: ballY - .5 *(y1+y2)};\r\n        if (\r\n            // ballOvershoot.x  > 0 &&\r\n             ballX > this.startRight || ballX < this.startLeft){\r\n            const catchupX = \r\n            Math.abs(ballOvershoot.x) < Math.abs(1.4 * ball.vx) ? \r\n            ballOvershoot.x : 1.4 * ball.vx;\r\n            this.x1 += catchupX;\r\n            this.x2 += catchupX;\r\n        }\r\n        if (\r\n            // ballOvershoot.y  > 0 && \r\n            ballY > this.startDown || ballY < this.startUp\r\n            ){\r\n            const catchupY = Math.abs(ballOvershoot.y) <Math.abs(1.4 * ball.vy) ?\r\n             ballOvershoot.y : 1.4 * ball.vy;\r\n            this.y1 += catchupY;\r\n            this.y2 += catchupY;\r\n        }\r\n    }\r\n\r\n    displayPos(pojo){\r\n        return {x: pojo.x - this.x1, y: pojo.y - this.y1 }\r\n    }\r\n}\r\n\r\nexport default Viewport;","import fastRandom from 'fast-random';\r\n\r\nclass Stars {\r\n    constructor(level){\r\n        this.topLeft = {x: level.corners[0]-600, y: level.corners[0]-300};\r\n        this.bottomRight = {x: level.corners[1]+600, y: level.corners[1]+300};\r\n        this.blocks = {};\r\n        this.starsPerBlock = 100;\r\n    }\r\n\r\n    generateBlock(xInThousands, yInThousands){\r\n        let x = xInThousands;\r\n        let y = yInThousands;\r\n        const seed = 1000*x + y;\r\n        const frandom = fastRandom(seed);\r\n        const stars = new Array(this.starsPerBlock);\r\n        for (let i=0; i< stars.length; i++){\r\n            stars[i] = [\r\n                1000*(x + frandom.nextFloat()), \r\n                1000*(y+frandom.nextFloat()), \r\n                .3 + .8 * (frandom.nextFloat())**9]\r\n        }\r\n        this.blocks[`${x}, ${y}`] = stars;\r\n    }\r\n\r\n    drawBlock(ctx, xInThousands, yInThousands, viewport){\r\n        let stars = this.blocks[`${xInThousands}, ${yInThousands}`];\r\n        ctx.fillStyle = \"white\";\r\n        for (let i=0; i< stars.length; i++){\r\n            let [x, y, r] = stars[i];\r\n            ctx.beginPath();\r\n            \r\n            ctx.arc(\r\n              x - viewport.x1, y - viewport.y1, r, 0, 2 * Math.PI, true\r\n            );\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    getBlock(x, y){\r\n        return this.blocks[`${x}, ${y}`];\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Stars;","import StartButton from \"./start_button\";\r\n\r\nclass Menu{\r\n    constructor(game){\r\n        this.color = '#e8e4da';\r\n        this.game = game;\r\n        this.startButton = new StartButton(game, 500, 350);\r\n    }\r\n\r\n    draw(ctx, x = 400, y = 100) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n         x, y, x+200, y+250\r\n        );\r\n        ctx.stroke();\r\n        ctx.fill();\r\n        // ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n          ctx.beginPath();\r\n        ctx.fillStyle = \"black\";\r\n        ctx.font = `${18}px Arial`;\r\n        ctx.fillText(`Use mouse or arrow keys to select launch direction. Click to launch.`, \r\n       x + 30, y + 40);\r\n        ctx.fillText(`Use 's' or 'f' for slower or faster playspeed, and 'p' to pause.`, \r\n       x + 30, y + 80);\r\n        ctx.fillText(`Pressing 'r' restarts the current level.`, \r\n       x + 30, y + 120);\r\n        ctx.fillText(`Press 'm' to return to this menu.`, \r\n       x + 30, y + 160);\r\n        \r\n    //      `${y + .5 * r + this.game.ball.radius}`);\r\n        ctx.fill();\r\n        this.startButton.draw(ctx);\r\n        }\r\n}\r\n\r\nexport default Menu;","class LevelDisplay{\r\n    constructor(level, x, y, scale = .3){\r\n        this.level = level;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.scale = scale;\r\n    }\r\n\r\n    draw(ctx){\r\n        const {obstacles, ball, planets, hole} = this.level;\r\n        const orbs = [ball].concat(planets);\r\n        orbs.forEach(orb => {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = orb.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.scale*orb.x+this.x, \r\n          this.scale*orb.y + this.y, \r\n          this.scale*orb.radius, \r\n          0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n        }\r\n        );\r\n        ctx.setLineDash([]);\r\n        obstacles.forEach(obst => {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.scale * obst.x1 + this.x, this.scale * obst.y1 + this.y);\r\n        ctx.lineTo(this.scale * obst.x2 + this.x, this.scale * obst.y2 + this.y);\r\n        ctx.strokeStyle = obst.color;\r\n        ctx.stroke();\r\n        })\r\n        hole.drawFlag(ctx, this.scale*hole.x + this.x, this.scale*hole.y + this.y, this.scale);\r\n        hole.drawHole(ctx, this.scale*hole.x + this.x, this.scale*hole.y + this.y, this.scale);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LevelDisplay;","import LevelDisplay from './level_display';\r\n\r\nclass LevelMenu {\r\n    constructor(game){\r\n        const levels = game.levels.slice(1);\r\n        this.levelDisplays = levels.map((lvl, idx)=>{\r\n            console.log(200*Math.floor(idx/3))\r\n            return (new LevelDisplay(\r\n                new lvl(game),\r\n         100 + (idx % 3) * 400,  \r\n         10 + 200*Math.floor(idx/3)\r\n         )\r\n         );}\r\n        )\r\n\r\n    }\r\n\r\n    draw(ctx){\r\n        this.levelDisplays.forEach(ld=>ld.draw(ctx));\r\n    }\r\n}    \r\n\r\nexport default LevelMenu;\r\n","import Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\nimport Level3 from './levels/level3';\r\nimport Level4 from './levels/level4';\r\nimport Level5 from './levels/level5';\r\nimport Level6 from './levels/level6';\r\nimport Level7 from './levels/level7';\r\nimport Level8 from './levels/level8';\r\nimport TimedMessage from './timedMessage';\r\nimport Viewport from './viewport';\r\nimport Stars from './stars';\r\nimport Menu from './menu';\r\nimport LevelMenu from './level_menu/level_menu';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.animating = true;\r\n        this.levels = [null, \r\n            Level1, \r\n            Level2,\r\n            Level3,\r\n            Level4,\r\n            Level5,\r\n            Level6,\r\n            Level7,\r\n            Level8\r\n        ];\r\n        this.menu = new Menu(this);\r\n        this.currentLevelNumber = 0;\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n        this.playSpeed = {num: 1, fractional: false};\r\n        this.setPlaySpeed = this.setPlaySpeed.bind(this);\r\n        this.frameCount = 0;\r\n        this.vp = new Viewport();\r\n        this.restartLevel = this.restartLevel.bind(this);\r\n        this.levelControl = this.levelControl.bind(this);\r\n        this.switchToLevelMenu = this.switchToLevelMenu.bind(this);\r\n        this.timedMessages = [];\r\n        this.canvas.addEventListener(\"keydown\", this.levelControl);\r\n        window.printo = () => {\r\n        let ball = this.ball;\r\n        console.log(`ballx: ${ball.x}, bpx: ${ball.prevx}, \r\n            balldrawX: ${ball.drawX}, ballInterX: ${ball.interpolateX}\r\n            viewportx1: ${this.vp.x1} viewporty1: ${this.vp.y1}`\r\n            )\r\n        }\r\n            requestAnimationFrame(this.animate.bind(this));\r\n        this.menuReady();\r\n    }\r\n    levelControl(event){\r\n        if (event.keyCode === 82) this.restartLevel();\r\n        if (event.keyCode === 76) this.switchToLevelMenu();\r\n    }\r\n\r\n    switchToLevelMenu(){\r\n        const levelMenu = new LevelMenu(this);\r\n        const {ctx, canvas} = this;\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.width = 1200;\r\n        ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        levelMenu.draw(this.ctx);\r\n        this.animating = false;\r\n    }\r\n\r\n    initiateLevel() {\r\n        \r\n        this.currentLevelNumber += 1;\r\n        \r\n\r\n        this.vp = new Viewport();\r\n        const level = new this.levels[this.currentLevelNumber](this);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets=level.planets || [];\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles || [];\r\n        this.corners = level.corners;\r\n        this.stars = new Stars(level);\r\n        this.stars.generateBlock(0, 0);\r\n        this.vp.setMovementStartPoints(\r\n            level.viewportMovementUp,\r\n            level.viewportMovementRight,\r\n            level.viewportMovementDown,\r\n            level.viewportMovementLeft);\r\n\r\n        this.canvas.addEventListener(\"keydown\", this.setPlaySpeed, false);\r\n\r\n        if (!this.menu){this.setupLaunchPad();}\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    setPlaySpeed(event){\r\n        if (![70,83].includes(event.keyCode)) return;\r\n        if (event.keyCode === 70){\r\n            if (this.playSpeed.fractional){\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -= 1;\r\n                }\r\n                else if (this.playSpeed.num === 1) {\r\n                    this.playSpeed.fractional = false;\r\n                    this.playSpeed.num = 2;\r\n                }   \r\n            }\r\n            else {\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n            }\r\n            }\r\n        }\r\n        if (event.keyCode === 83) {\r\n            if (this.playSpeed.fractional){\r\n                if ([1,2,3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n                }\r\n            }\r\n            else {\r\n                if ([2,3,4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -=1;\r\n                }\r\n                else if (this.playSpeed.num === 1){\r\n                    this.playSpeed.fractional = true;\r\n                    this.playSpeed.num = 2;\r\n                }\r\n            }\r\n        } \r\n        this.timedMessages = [ new TimedMessage(\r\n            `Playspeed: ${this.playSpeed.fractional ? \r\n                (1/this.playSpeed.num).toFixed(2) : this.playSpeed.num}`)];\r\n    }\r\n    \r\n    victoryMessage(){\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!', \r\n       400, 400);\r\n        ctx.fill();\r\n    }\r\n\r\n    \r\n        \r\n    setupLaunchPad(){\r\n        let game = this;\r\n        let canvas = game.canvas;\r\n        let setVelocityWithMouse = e => this.launchPad.setVelocity(e);\r\n        let launchBallWithMouse =  e => {if (this.launchPad.launch()){\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            canvas.removeEventListener(\"keydown\", keyDownHandler, false);\r\n            this.launchPad = null;\r\n\r\n        }}\r\n        let arrowCodes = [37, 38, 39, 40];\r\n        let keyDownHandler = e => {\r\n            if (arrowCodes.includes(e.keyCode)){\r\n            canvas.removeEventListener('mousemove', setVelocityWithMouse, false);}\r\n            game.launchPad.setVelocityByArrowKeys(e, () => {\r\n            canvas.removeEventListener('keydown', keyDownHandler, false); \r\n            canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n            this.launchPad = null;\r\n            });\r\n        }\r\n\r\n        this.setVelocityWithMouse = setVelocityWithMouse;\r\n        this.keyDownHandler = keyDownHandler;\r\n        this.launchBallWithMouse = launchBallWithMouse;\r\n        canvas.addEventListener(\"mousemove\", this.setVelocityWithMouse, true);\r\n        canvas.addEventListener('keydown', this.keyDownHandler, false);\r\n        canvas.addEventListener(\"click\", this.launchBallWithMouse, false);\r\n    }\r\n    \r\n    disableLaunchPad(){\r\n        let canvas = this.canvas;\r\n        canvas.removeEventListener('keydown', this.keyDownHandler, false); \r\n        canvas.removeEventListener(\"click\", this.launchBallWithMouse, false);\r\n        canvas.removeEventListener('mousemove', this.setVelocityWithMouse, false);\r\n    }\r\n\r\n    menuReady(){\r\n        let canvas = this.canvas;\r\n        canvas.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 77){\r\n            this.disableLaunchPad();\r\n            this.menu = new Menu(this)}\r\n            if(e.keyCode === 80){\r\n                if(this.animating){this.animating = false;}\r\n                else{\r\n                    this.animating = true;\r\n                    requestAnimationFrame(this.animate.bind(this));\r\n                }\r\n            }\r\n        }\r\n        , false);\r\n                \r\n    }\r\n\r\n    \r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n        this.vp.moveWithBall(this.ball.interpolateX, this.ball.interpolateY,\r\n            this.ball);\r\n        this.timedMessages.forEach(message => {\r\n            message.duration -= 1;\r\n        });\r\n        this.timedMessages = this.timedMessages.filter(message => \r\n           (message.duration >= 0) );\r\n\r\n    }\r\n\r\n    moveObjects() {\r\n        let {playSpeed} = this;\r\n        if (playSpeed.fractional){\r\n            if (this.frameCount % playSpeed.num ===0 ){\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n\r\n        }\r\n        else {\r\n            for (let i = 1; i <= playSpeed.num; i++) {\r\n                this.ball.move();\r\n              if (!this.ball.checkRectangle(this.corners)){\r\n                this.restartLevel();\r\n                return;\r\n                 }\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(time) {\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        this.draw();\r\n        this.lastTime = time;\r\n        this.frameCount += 1;\r\n\r\n        if(this.animating)\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    \r\n    draw() {\r\n        let {ctx, ball, vp, launchPad, hole} = this;\r\n        \r\n        ctx.width = 1200;\r\n        ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.clearRect(0, 0, 1200, 600);\r\n        if (this.stars){\r\n            for(let i=Math.floor(vp.x1/1000); i<= Math.ceil(vp.x2/1000); i++){\r\n                for (let j=Math.floor(vp.y1/1000); j<=Math.ceil(vp.y2/1000); j++){\r\n                    if (!this.stars.getBlock(i, j)){\r\n                        this.stars.generateBlock(i, j)\r\n                    }\r\n                    this.stars.drawBlock(ctx, i, j, vp);\r\n                }\r\n            }\r\n        }\r\n        hole.drawFlag(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        ball.draw(ctx);\r\n        hole.drawHole(ctx, hole.x - vp.x1, hole.y - vp.y1);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx, vp));\r\n        this.planets.forEach(planet => \r\n            planet.draw(ctx, planet.x - vp.x1, planet.y - vp.y1));\r\n        this.timedMessages.forEach( message => {message.draw(ctx);})\r\n        if(launchPad) {launchPad.draw(ctx);}\r\n        if(this.won) this.victoryMessage();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"#3e78ad\"\r\n        ctx.font = `14px Arial`;\r\n        ctx.fillText(`Velocity_x=${this.ball.vx.toFixed(0)}, Velocity_y=${this.ball.vy.toFixed(0)},\r\n        speed = ${Math.sqrt(this.ball.vx ** 2 + this.ball.vy **2).toFixed(0)}`, \r\n        20,\r\n         550);\r\n        ctx.fill();\r\n        ctx.font = '16px Arial';\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillText(`Level ${this.currentLevelNumber}`, \r\n        20,\r\n         580);\r\n            if (this.menu) this.menu.draw(ctx);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.initiateLevel();\r\n});\r\n"],"sourceRoot":""}