{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/fast-random/index.js","webpack:///./src/helper.js","webpack:///./src/launchpad.js","webpack:///./src/ball.js","webpack:///./src/Sticky_planet.js","webpack:///./src/obstacle.js","webpack:///./src/timedMessage.js","webpack:///./src/hole.js","webpack:///./src/levels/level1.js","webpack:///./src/levels/level2.js","webpack:///./src/levels/level3.js","webpack:///./src/start_button.js","webpack:///./src/levels/level4.js","webpack:///./src/levels/level5.js","webpack:///./src/obstacles.js","webpack:///./src/levels/level6.js","webpack:///./src/levels/level7.js","webpack:///./src/levels/level8.js","webpack:///./src/levels/level9.js","webpack:///./src/levels/titleLevel.js","webpack:///./src/titleSequence.js","webpack:///./src/viewport.js","webpack:///./src/stars.js","webpack:///./src/menu.js","webpack:///./src/level_menu/level_display.js","webpack:///./src/level_menu/level_menu.js","webpack:///./src/game.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","seed","_seed","_nextInt","nextInt","nextFloat","dottedArc","ctx","x","y","radius","theta0","theta1","color","theta","numPieces","Math","ceil","dTheta","strokeStyle","beginPath","arc","stroke","vectorAngle","vector","PI","atan","vectorLength","sqrt","intervalsIntersect","interval1","interval2","a1","b1","a2","b2","launchpad_error","rect","document","getElementById","getBoundingClientRect","launchpad","[object Object]","game","normal","maxTheta","this","draw","move","launch","arrowVector","updatePolar","updateArrowTip","updateLaunchVelocity","launchVx","launchVy","normalAngle","setVelocity","arrowTip","arrowAngle","arrowLength","thetaRestrictionHelper","cos","sin","setVelocityByArrowKeys","vx","vy","vp","displayPos","x1","zoom","y1","currentPlanet","hideText","setLineDash","moveTo","lineTo","drawArrowBits","textX","textY","fillStyle","font","fillText","toFixed","fill","ball","textPos","stopped","event","cursor","clientX","clientY","dx","dy","dz","callback","al","keyCode","max","min","includes","src_ball","ax","ay","prevx","prevy","drawX","drawY","interpolateX","interpolateY","playSpeed","fractional","num","residue","frameCount","corners","planets","forEach","planet","dz2","ballData","error","sticky","abs","stop","launchPad","setupLaunchPad","bounce","mass","obstacles","obstacle","checkForBall","hole","checkForWin","winHandler","currentLevelNumber","levels","length","won","initiateLevel","undefined","setAuxPositions","Sticky_planet","density","floor","x2","y2","width","z","vDotNormal","new_vx","new_vy","viewport","lineWidth","timedMessage","text","duration","scale","drawFlag","drawHole","a","leftBound","messages","timedMessages","prevPerpComponent","perpComponent","push","level1","viewportMovementStartX","viewportMovementStartY","level2","level3","invSqrt","start_button_error","start_button","clickHandler","canvas","addEventListener","visible","removeEventListener","menu","level4","level5","polyFromFunction","f","g","b","step","t0","t1","result","obst","level6","ellipse1","ellipse2","concat","level7","ellipse","viewportZoom","viewportX2","viewportY2","level8","level9","viewportStyle","titleLevel","splash","titleSequenceController","titleSequence","start","textRGB","phase","starRGB","startGamePlay","requestAnimationFrame","animate","currentColor","slice","newRed","brightness","newBrightness","body","rgb","colorStr","stars","level","viewportX1","viewportY1","setMovementStart","setMovementStartPoints","moveWithBall","style","up","right","down","left","startUp","startRight","startDown","startLeft","ballX","ballY","moveCentered","ballOvershoot","catchupX","catchupY","pojo","src_stars","levelNum","topLeft","bottomRight","blocks","starsPerBlock","xInThousands","yInThousands","frandom","fast_random_default","Array","j","getBlock","generateBlock","drawBlock","startButton","level_display","orb","drawHoleWithBound","level_menu_error","level_menu","perSide","installEventListener","levelDisplays","map","lvl","idx","levelNumber","animating","ld","src_game","setAttribute","getContext","setPlaySpeed","restartLevel","levelControl","displayKeyCommands","switchToLevelMenu","window","printo","console","log","parseInt","menuReady","levelMenu","clearRect","levelClass","viewportMovementUp","viewportMovementRight","viewportMovementDown","viewportMovementLeft","setVelocityWithMouse","e","launchBallWithMouse","keyDownHandler","arrowCodes","disableLaunchPad","delta","moveObjects","message","filter","checkRectangle","time","timeDelta","lastTime","drawStars","victoryMessage"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function random(seed) {\r\n\tfunction _seed(s) {\r\n\t\tif ((seed = (s|0) % 2147483647) <= 0) {\r\n\t\t\tseed += 2147483646;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _nextInt() {\r\n\t\treturn seed = seed * 48271 % 2147483647;\r\n\t}\r\n\r\n\tfunction _nextFloat() {\r\n\t\treturn (_nextInt() - 1) / 2147483646;\r\n\t}\r\n\r\n\t_seed(seed);\r\n\r\n\treturn {\r\n\t\tseed: _seed,\r\n\t\tnextInt: _nextInt,\r\n\t\tnextFloat: _nextFloat\r\n\t};\r\n}\r\n\r\nmodule.exports = random;\r\n","export const dottedArc = function (ctx, x, y, radius, theta0, theta1, color) {\r\n    const a = .1;\r\n    let theta = theta1 - theta0;\r\n    let numPieces = 2 * Math.ceil(.5 * (theta / a - 1)) + 1;\r\n    let dTheta = theta / numPieces;\r\n    ctx.strokeStyle = color;\r\n    for (let i = 0; i < numPieces; i++) {\r\n        ctx.beginPath();\r\n        if (i % 2 == 0) {\r\n            ctx.arc(\r\n                x, y, radius, theta0 + i * dTheta, theta0 + (i + 1) * dTheta\r\n            );\r\n            ctx.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nexport const vectorAngle = function (vector) {\r\n    const x = vector[0];\r\n    const y = vector[1];\r\n    if (x == 0) {\r\n        return y > 0 ? Math.PI / 2 : -Math.PI / 2;\r\n    }\r\n\r\n    return x > 0 ? Math.atan(y / x) : Math.PI + Math.atan(y / x);\r\n\r\n}\r\n\r\nexport const vectorLength = function (vector) {\r\n    return Math.sqrt(vector[0] ** 2 + vector[1] ** 2);\r\n}\r\n\r\n\r\nexport const intervalsIntersect = function (interval1, interval2) {\r\n    let [a1, b1] = interval1;\r\n    let [a2, b2] = interval2;\r\n    return (b2 - a1) * (a2 - a1) <= 0 || (b2 - b1) * (a2 - b1) <= 0\r\n        || (b1 - a2) * (a1 - a2) <= 0 || (b1 - b2) * (a1 - b2) <= 0;\r\n}\r\n","import { dottedArc, vectorAngle, vectorLength } from './helper';\r\nconst error = () => {\r\n   let m = document.getElementById(\"game-canvas\");\r\n   let rect = m.getBoundingClientRect();\r\n   return { x: rect.x, y: rect.y };\r\n}\r\n\r\nclass LaunchPad {\r\n   constructor(game, x = 0, y = 0, normal = [0, 1], maxTheta = Math.PI / 2, radius = 160, color = \"white\") {\r\n      this.game = game;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.normal = normal;\r\n      this.radius = radius;\r\n      this.color = color;\r\n      this.draw = this.draw.bind(this);\r\n      this.move = this.move.bind(this);\r\n      this.launch = this.launch.bind(this);\r\n      this.arrowVector = this.arrowVector.bind(this);\r\n      this.updatePolar = this.updatePolar.bind(this);\r\n      this.updateArrowTip = this.updateArrowTip.bind(this);\r\n      this.updateLaunchVelocity = this.updateLaunchVelocity.bind(this);\r\n      this.launchVx = 0;\r\n      this.launchVy = 0;\r\n      this.normalAngle = vectorAngle(normal);\r\n      this.setVelocity = this.setVelocity.bind(this);\r\n      this.arrowTip = { x: null, y: null };\r\n      this.arrowAngle = this.normalAngle;\r\n      this.arrowLength = 60;\r\n      this.maxTheta = maxTheta;\r\n      this.thetaRestrictionHelper = (1 - Math.cos(maxTheta)) ** 2 + (Math.sin(maxTheta)) ** 2;\r\n      this.setVelocityByArrowKeys = this.setVelocityByArrowKeys.bind(this);\r\n   }\r\n\r\n   move() {\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n   }\r\n\r\n   vpX() {\r\n      return this.game.vp.displayPos(this).x;\r\n   }\r\n\r\n   vpY() {\r\n      return this.game.vp.displayPos(this).y;\r\n   }\r\n\r\n   arrowVector() {\r\n      const vp = this.game.vp;\r\n      return [this.arrowTip.x - (this.x - vp.x1)*vp.zoom, this.arrowTip.y - (this.y - vp.y1)*vp.zoom];\r\n   }\r\n\r\n   updatePolar() {\r\n      this.arrowLength = vectorLength(this.arrowVector());\r\n      this.arrowAngle = vectorAngle(this.arrowVector());\r\n   }\r\n\r\n   updateArrowTip() {\r\n      let vp = this.game.vp;\r\n      this.arrowTip.x = (this.x - vp.x1) + this.arrowLength * Math.cos(this.arrowAngle);\r\n      this.arrowTip.y = (this.y - vp.y1) + this.arrowLength * Math.sin(this.arrowAngle);\r\n   }\r\n\r\n   updateLaunchVelocity() {\r\n      let vp = this.game.vp;\r\n      this.launchVx = this.arrowVector()[0] / (8 * vp.zoom);\r\n      this.launchVy = this.arrowVector()[1] / (8 * vp.zoom);\r\n   }\r\n\r\n   draw(ctx, vp) {\r\n      let zoom = vp.zoom;\r\n      let x = (this.x - vp.x1) * zoom;\r\n      let y = (this.y - vp.y1) * zoom;\r\n      let r = this.radius * zoom;\r\n      dottedArc(ctx, x, y, r,\r\n         this.normalAngle - this.maxTheta, this.normalAngle + this.maxTheta, this.color);\r\n      let currentPlanet = this.game.currentPlanet;\r\n      if (this.arrowTip.x === null) { currentPlanet.hideText = false; }\r\n      if (this.arrowTip.x !== null) {\r\n         ctx.beginPath();\r\n         ctx.strokeStyle = \"white\";\r\n         ctx.setLineDash([5, 5]);\r\n         ctx.moveTo(x, y);\r\n         ctx.lineTo(this.arrowTip.x, this.arrowTip.y)\r\n         ctx.stroke();\r\n         this.drawArrowBits(ctx);\r\n         ctx.beginPath();\r\n         let textX = 0.5 * (x + this.arrowTip.x);\r\n         let textY = 0.5 * (y + this.arrowTip.y);\r\n         ctx.fillStyle = \"purple\"\r\n         ctx.font = `${21}px Arial`;\r\n         ctx.fillText(`Initial speed: ${(this.arrowLength / (8 * zoom)).toFixed(2)}`,\r\n            `${textX}`,\r\n            `${textY}`);\r\n         ctx.fill();\r\n         let vp = this.game.vp;\r\n         let ball = this.game.ball;\r\n         if (textX >= currentPlanet.textPos.x - vp.x1 - 150 &&\r\n            textY >= currentPlanet.textPos.y - vp.y1 - 28 + ball.radius &&\r\n            textY <= currentPlanet.textPos.y - vp.y1 + 8 + ball.radius) {\r\n            currentPlanet.hideText = true;\r\n         }\r\n         else { currentPlanet.hideText = false; }\r\n\r\n      }\r\n   }\r\n\r\n   drawArrowBits(ctx) {\r\n      let { x, y, arrowTip, game } = this;\r\n      let vp = game.vp;\r\n      x = (x- vp.x1)*vp.zoom;\r\n      y = (y - vp.y1) * vp.zoom;\r\n\r\n      const theta = vectorAngle([arrowTip.x - x, arrowTip.y - y]);\r\n      ctx.setLineDash([]);\r\n      ctx.beginPath();\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta + 3 * Math.PI / 4),\r\n         arrowTip.y + 12 * Math.sin(theta + 3 * Math.PI / 4));\r\n      ctx.moveTo(arrowTip.x, arrowTip.y);\r\n      ctx.lineTo(\r\n         arrowTip.x + 12 * Math.cos(theta - 3 * Math.PI / 4),\r\n         arrowTip.y + 12 * Math.sin(theta - 3 * Math.PI / 4));\r\n      ctx.stroke();\r\n\r\n   }\r\n\r\n   launch() {\r\n      if (this.arrowTip.x === null) {\r\n         return false;\r\n      }\r\n      this.game.ball.stopped = false;\r\n      this.game.ball.vx = this.launchVx;\r\n      this.game.ball.vy = this.launchVy;\r\n      return true;\r\n   }\r\n\r\n   setVelocity(event) {\r\n      const vp = this.game.vp;\r\n      const cursor = { x: event.clientX - error().x, y: event.clientY - error().y };\r\n      const dx = cursor.x - (this.x - vp.x1)*vp.zoom;\r\n      const dy = cursor.y - (this.y - vp.y1)*vp.zoom;\r\n      const dz = Math.sqrt(dx ** 2 + dy ** 2);\r\n      if (\r\n         dx ** 2 + dy ** 2 <= (this.radius*vp.zoom) ** 2 &&\r\n         (this.normal[0] - dx / dz) ** 2 + (this.normal[1] - dy / dz) ** 2 <= this.thetaRestrictionHelper\r\n      ) {\r\n         this.arrowTip.x = cursor.x;\r\n         this.arrowTip.y = cursor.y;\r\n         this.updateLaunchVelocity();\r\n         this.updatePolar();\r\n      }\r\n      else {\r\n         this.arrowTip.x = null;\r\n      }\r\n   }\r\n\r\n   setVelocityByArrowKeys(event, callback) {\r\n      const al = this.arrowLength;\r\n      if (event.keyCode === 40) {\r\n         this.arrowLength = Math.max(al - .4, 0);\r\n      }\r\n      if (event.keyCode === 38) {\r\n         this.arrowLength = Math.min(al + .4, this.radius);\r\n      }\r\n      if (event.keyCode === 37) {\r\n         this.arrowAngle -= .004;\r\n      }\r\n      if (event.keyCode === 39) {\r\n         this.arrowAngle += .004;\r\n      }\r\n      if ([32, 13].includes(event.keyCode)) {\r\n         if (this.launch()) {\r\n            callback();\r\n         }\r\n      }\r\n      this.updateArrowTip();\r\n      this.updateLaunchVelocity();\r\n   }\r\n}\r\n\r\nexport default LaunchPad;\r\n","import LaunchPad from \"./launchpad\";\r\nclass Ball {\r\n    constructor(game, x = 0, y = 0, radius = 5, color = \"white\", vx = 0, vy = 0) {\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.radius = radius;\r\n        this.color = color;\r\n        this.draw = this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n        this.stopped = true;\r\n        this.prevx = x;\r\n        this.prevy = y;\r\n        this.drawX = x;\r\n        this.drawY = y;\r\n        this.interpolateX = x;\r\n        this.interpolateY = y;\r\n    }\r\n\r\n    vpX() {\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n    vpY() {\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n\r\n    setAuxPositions() {\r\n        const playSpeed = this.game.playSpeed;\r\n        const vp = this.game.vp;\r\n        if (playSpeed.fractional && playSpeed.num > 1) {\r\n            const num = playSpeed.num;\r\n            const residue = this.game.frameCount % num;\r\n            this.interpolateX = (residue / num) * this.x + (1 - residue / num) * this.prevx;\r\n            this.interpolateY = (residue / num) * this.y + (1 - residue / num) * this.prevy;\r\n        }\r\n        else {\r\n            this.interpolateX = this.x;\r\n            this.interpolateY = this.y;\r\n        }\r\n        this.drawX = (this.interpolateX - vp.x1)*vp.zoom;\r\n        this.drawY = (this.interpolateY - vp.y1)*vp.zoom;\r\n    }\r\n\r\n    checkRectangle(corners) {\r\n        const { x, y } = this;\r\n        return x > corners[0][0] && x < corners[1][0] && y > corners[0][1] && y < corners[1][1];\r\n    }\r\n\r\n    stop() {\r\n        this.stopped = true;\r\n        this.vx = 0;\r\n        this.vy = 0;\r\n    }\r\n    move() {\r\n        this.prevx = this.x;\r\n        this.prevy = this.y;\r\n        if (this.stopped) return;\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n        this.vx += this.ax;\r\n        this.vy += this.ay;\r\n        this.ax = 0;\r\n        this.ay = 0;\r\n\r\n        this.game.planets.forEach(planet => {\r\n            const { dx, dy, dz2, dz, normal } = planet.ballData();\r\n            if (dz <= this.radius + planet.radius) {\r\n                let error = this.radius + planet.radius - dz;\r\n                this.x += error * normal[0];\r\n                this.y += error * normal[1];\r\n                this.ax = 0;\r\n                this.ay = 0;\r\n                if (planet.sticky || Math.abs(this.vx) + Math.abs(this.vy) < 1) {\r\n                    this.stop();\r\n                    this.game.currentPlanet = planet;\r\n                    this.game.launchPad = new LaunchPad(this.game, this.x, this.y, normal, planet.maxTheta);\r\n                    this.game.setupLaunchPad();\r\n                }\r\n                else { planet.bounce(normal); }\r\n\r\n            }\r\n            else {\r\n                this.ax -= (1 / dz2) * planet.mass * dx / dz * .2;\r\n                this.ay -= (1 / dz2) * planet.mass * dy / dz * .2;\r\n            }\r\n        });\r\n        const game = this.game;\r\n        game.obstacles.forEach(obstacle => {\r\n            if (obstacle.checkForBall()) {\r\n                obstacle.bounce();\r\n            }\r\n        })\r\n        if (game.hole.checkForWin()) {\r\n            this.winHandler();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //invoked when the ball enters the hole going the proper direction\r\n    winHandler() {\r\n        this.stop();\r\n        const game = this.game;\r\n        if (game.currentLevelNumber >= game.levels.length - 1) {\r\n            game.won = true;\r\n        }\r\n        else {\r\n            game.initiateLevel();\r\n            game.playSpeed = { num: 1, fractional: false };\r\n        }\r\n    }\r\n\r\n    draw(ctx, x, y, r = this.radius) {\r\n        if (x === undefined) {\r\n            this.setAuxPositions();\r\n            x = this.drawX;\r\n            y = this.drawY;\r\n        }\r\n        let vp = this.game.vp;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n            x, y, r * vp.zoom, 0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n    };\r\n}\r\n\r\nexport default Ball;","\r\nclass StickyPlanet {\r\n  constructor(game, x = 0, y = 0, radius = 10, color = \"grey\", density, maxTheta = Math.PI / 2, vx = 0, vy = 0) {\r\n    this.game = game;\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.color = color;\r\n    this.draw = this.draw.bind(this);\r\n    this.move = this.move.bind(this);\r\n    this.vx = vx;\r\n    this.vy = vy;\r\n    this.density = density || 1;\r\n    this.mass = this.density * this.radius ** 3;\r\n    this.sticky = true;\r\n    this.hideText = false;\r\n    this.maxTheta = maxTheta;\r\n    this.textPos = { x: x + radius + 2, y: y + radius + .5 };\r\n  }\r\n\r\n  vpX() {\r\n    return this.game.vp.displayPos(this).x;\r\n  }\r\n\r\n  vpY() {\r\n    return this.game.vp.displayPos(this).y;\r\n  }\r\n\r\n  move() {\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n  }\r\n\r\n  ballData() {\r\n    const ball = this.game.ball;\r\n    const dx = ball.x - this.x;\r\n    const dy = ball.y - this.y;\r\n    const dz2 = ((dx) ** 2 + (dy) ** 2);\r\n    const dz = Math.sqrt(dz2);\r\n    const normal = [dx / dz, dy / dz];\r\n    return { dx, dy, dz2, dz, normal }\r\n  }\r\n\r\n  draw(ctx, vp) {\r\n    let x = (this.x - vp.x1)*vp.zoom;\r\n    let y = (this.y - vp.y1)*vp.zoom;\r\n    let r = this.radius * vp.zoom;\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.arc(\r\n      x, y, r, 0, 2 * Math.PI, true\r\n    );\r\n    ctx.font = `${Math.floor(.9 * r)}px Arial`;\r\n    ctx.fill();\r\n    if (!this.hideText) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = \"#3e78ad\"\r\n      ctx.font = `${14}px Arial`;\r\n      ctx.fillText(`Escape vel. ${(this.radius * this.density ** .45 * .504).toFixed(2)}`,\r\n        `${x + r + 2}`,\r\n        `${y + .5 * r + this.game.ball.radius}`);\r\n    };\r\n  }\r\n}\r\n\r\nexport default StickyPlanet;","import { intervalsIntersect } from './helper';\r\nclass Obstacle {\r\n    constructor(game, x1 = 0, y1 = 0, x2 = 100, y2 = 100, color = \"orange\", width = 1) {\r\n        this.game = game;\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n        this.color = color;\r\n        this.draw = this.draw.bind(this);\r\n        this.move = this.move.bind(this);\r\n        let z = Math.sqrt((y1 - y2) ** 2 + (x2 - x1) ** 2)\r\n        this.normal = [(y1 - y2) / z, (x2 - x1) / z];\r\n        this.bounce = this.bounce.bind(this);\r\n        this.checkForBall = this.checkForBall.bind(this);\r\n        this.width = width;\r\n    }\r\n\r\n    bounce() {\r\n        let ball = this.game.ball;\r\n        let normal = this.normal;\r\n        let vDotNormal = ball.vx * normal[0] + ball.vy * normal[1];\r\n        let new_vx = ball.vx - 2 * vDotNormal * normal[0];\r\n        let new_vy = ball.vy - 2 * vDotNormal * normal[1];\r\n        ball.vx = new_vx;\r\n        ball.vy = new_vy;\r\n    }\r\n\r\n    checkForBall() {\r\n        let ball = this.game.ball;\r\n        let { x1, x2, y1, y2 } = this;\r\n        let normal = [y1 - y2, x2 - x1]\r\n        let { x, y, radius, vx, vy } = ball;\r\n        let perpComponent = normal[0] * (x - x1) + normal[1] * (y - y1);\r\n        let nextPerpComponent = normal[0] * (x + vx - x1) + normal[1] * (y + vy - y1);\r\n        return perpComponent * nextPerpComponent <= 0\r\n            && intervalsIntersect([x, x + vx], [x1, x2])\r\n            && intervalsIntersect([y, y + vy], [y1, y2]);\r\n    }\r\n\r\n    move() {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    draw(ctx, viewport) {\r\n        let { x1, y1, zoom } = viewport;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.lineWidth = this.width;\r\n        ctx.moveTo((this.x1 - x1)*zoom, (this.y1 - y1)*zoom);\r\n        ctx.lineTo((this.x2 - x1)*zoom, (this.y2 - y1)*zoom);\r\n        ctx.strokeStyle = this.color;\r\n        ctx.stroke();\r\n        ctx.lineWidth = 1;\r\n    };\r\n}\r\n\r\nexport default Obstacle;","class TimedMessage {\r\n    constructor(text, duration = 60, color, font = '30px Arial', x = 400, y = 300) {\r\n        this.text = text;\r\n        this.duration = duration;\r\n        this.font = font;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color || \"#3e78ad\";\r\n    }\r\n\r\n    draw(ctx) {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = this.color;\r\n        ctx.font = this.font;\r\n        ctx.fillText(this.text,\r\n            this.x,\r\n            this.y);\r\n        ctx.fill();\r\n    }\r\n}\r\n\r\nexport default TimedMessage;","import { intervalsIntersect } from './helper';\r\nimport TimedMessage from './timedMessage';\r\nclass Hole {\r\n    constructor(game, x, y, normal = [0, -1], width = 100, scale = 1) {\r\n        this.game = game;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n        this.normal = normal;\r\n        this.drawFlag = this.drawFlag.bind(this);\r\n        this.drawHole = this.drawHole.bind(this);\r\n    }\r\n\r\n    vpX() {\r\n        return this.game.vp.displayPos(this).x;\r\n    }\r\n\r\n    vpY() {\r\n        return this.game.vp.displayPos(this).y;\r\n    }\r\n\r\n    move() {\r\n        this.x += this.vx;\r\n        this.y += this.vy;\r\n    }\r\n\r\n    drawFlag(ctx, vp) {\r\n        let x = (this.x - vp.x1)*vp.zoom;\r\n        let y = (this.y - vp.y1)*vp.zoom;\r\n        let normal = this.normal;\r\n        let a = vp.zoom;\r\n        ctx.setLineDash([]);\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"gold\";\r\n        ctx.moveTo(x, y);\r\n        ctx.lineTo(x + a * 50 * normal[0], y + a * 50 * normal[1])\r\n        ctx.stroke();\r\n        ctx.fillStyle = \"#db0711\";\r\n        ctx.moveTo(x + a * 50 * normal[0], y + a * 50 * normal[1]);\r\n        ctx.lineTo(x + a * 70 * normal[0], y + a * 70 * normal[1]);\r\n        ctx.lineTo(x + a * 60 * normal[0] - a * 30 * normal[1], y + a * 60 * normal[1] + a * 30 * normal[0]);\r\n        ctx.lineTo(x + a * 50 * normal[0], y + a * 50 * normal[1]);\r\n        ctx.fill();\r\n    }\r\n\r\n    drawHole(ctx,  vp) {\r\n        let x = (this.x - vp.x1)*vp.zoom;\r\n        let y = (this.y - vp.y1)*vp.zoom;\r\n        let { width, normal } = this;\r\n        let a = vp.zoom;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"purple\";\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(x - a * normal[1] * width / 2, y + a * normal[0] * width / 2);\r\n        ctx.lineTo(x + a * normal[1] * width / 2, y - a * normal[0] * width / 2);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 1;\r\n    }\r\n\r\n    drawHoleWithBound(ctx, vp, leftBound){\r\n        let x = (this.x - vp.x1)*vp.zoom;\r\n        let y = (this.y - vp.y1)*vp.zoom;\r\n        let { width, normal } = this;\r\n        let a = vp.zoom;\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"purple\";\r\n        ctx.lineWidth = 2;\r\n        ctx.moveTo(Math.max(leftBound, x - a * normal[1] * width / 2), y + a * normal[0] * width / 2);\r\n        ctx.lineTo(Math.max(leftBound, x + a * normal[1] * width / 2), y - a * normal[0] * width / 2);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 1;\r\n    }\r\n    checkForWin() {\r\n        let { x, y, width, normal } = this;\r\n        let ball = this.game.ball;\r\n        let messages = this.game.timedMessages;\r\n\r\n        let prevPerpComponent = normal[0] * (ball.prevx - x) + normal[1] * (ball.prevy - y);\r\n        let perpComponent = normal[0] * (ball.x - x) + normal[1] * (ball.y - y);\r\n        if (intervalsIntersect([ball.prevx, ball.x], [x - 0.5 * width * normal[1], x + 0.5 * width * normal[1]])\r\n            && intervalsIntersect([ball.prevy, ball.y], [y - 0.5 * width * normal[0], y + 0.5 * width * normal[0]])\r\n        ) {\r\n            if (prevPerpComponent >= 0 && perpComponent <= 0) {\r\n                for (let i = 0; i < messages.length; i++) {\r\n                    if (messages[i].text === \"WRONG WAY\") {\r\n                        messages[i] = new TimedMessage(\"oh nice\", 14, \"#9e8720\", '18px Arial', this.x + 50, this.y + 100);\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            if (prevPerpComponent < 0 && perpComponent > 0) {\r\n                messages.push(\r\n                    new TimedMessage(\"WRONG WAY\", 80, \"#9c1c22\", '28px Trebuchet MS', this.x, this.y + 70)\r\n                );\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Hole;\r\n","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport Hole from '../hole';\r\nclass Level1 {\r\n    constructor(game){\r\n        this.ball = new Ball(game, 300 + 25 + 5, 240 );\r\n        this.corners = [[-200, -200], [1200, 600]];\r\n        this.currentPlanet = new StickyPlanet(game, 300, 240, 25, \"#27753a\", 1);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            // new StickyPlanet(game, 640, 490, 22, \"white\", 3),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 680, 435,  [0,-1], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 350, 280, 750, 500),\r\n            new Obstacle(game, 750, 150, 750, 500)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level1;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\n\r\nclass Level2 {\r\n    constructor(game){\r\n    this.ball = new Ball(game, 600, 300);\r\n        this.currentPlanet = new StickyPlanet(game, 600, 330, 25, \"#27753a\", 1);\r\n        this.corners = [[-200, -800], [2400, 1900]];\r\n        this.launchPad = new LaunchPad(game, 600, 300, [0, -1]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 640, 180);\r\n        this.obstacles=[];\r\n        \r\n        }\r\n}\r\n\r\nexport default Level2;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport Hole from '../hole';\r\nclass Level3 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 100 + (25 + 5)*invSqrt, 40 + (25 + 5)*invSqrt);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 100, 40, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 640, 490, 22, \"orange\", 2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 420,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            new Obstacle(game, 250, 150, 640, 340),\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level3;","const error = () => {\r\n    let m = document.getElementById(\"game-canvas\");\r\n    let rect = m.getBoundingClientRect();\r\n    return { x: rect.x, y: rect.y };\r\n}\r\nclass StartButton {\r\n    constructor(game, x, y, color = 'black') {\r\n        this.game = game;\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        game.canvas.addEventListener(\"click\", this.clickHandler);\r\n        this.visible = true;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.color = color;\r\n    }\r\n\r\n    draw(ctx) {\r\n        if (this.visible) {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = this.color;\r\n            ctx.font = `${25}px Arial`;\r\n            ctx.fillText(`Start`,\r\n                this.x, this.y);\r\n            ctx.fill();\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = this.color;\r\n            ctx.moveTo(this.x - 20, this.y + 10);\r\n            ctx.lineTo(this.x - 20, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y - 25);\r\n            ctx.lineTo(this.x + 75, this.y + 10);\r\n            ctx.lineTo(this.x - 20, this.y + 10);\r\n            ctx.stroke();\r\n        }\r\n\r\n    }\r\n    clickHandler(event) {\r\n        const cursor = { x: event.clientX - error().x, y: event.clientY - error().y };\r\n        if (\r\n            cursor.x >= this.x - 20 && cursor.x <= this.x + 75\r\n            && cursor.y >= this.y - 25 && cursor.y <= this.y + 10\r\n        ) {\r\n            this.game.setupLaunchPad();\r\n            this.game.canvas.removeEventListener(\"click\", this.clickHandler, false);\r\n            this.visible = false;\r\n            this.game.menu = null;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default StartButton;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level4 {\r\n    constructor(game){\r\n        const sqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 560 + (25 + 5), 245);\r\n        this.corners = [[-200, -200], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 560, 245, 25, \"#27753a\", 1);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0]);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 300, 400, 35), \r\n            new StickyPlanet(game, 640, 280, 20, \"orange\", 1),\r\n            \r\n        ]\r\n        this.hole = new Hole(game, 665, 330,   [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            new Obstacle(game, 250, 280, 640, 280),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level4;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level5 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 200 + (35+ 5)*invSqrt, 380 - (35 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 200, 380, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, -invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 720, 330,  [sqrt,-sqrt], 100);\r\n        this.obstacles = [\r\n            // new Obstacle(game, 90, 0, 90, 900)   ,\r\n            // new Obstacle(game, 250, 150, 640, 300),\r\n            // new Obstacle(game, 360, 100, 650, 270)\r\n        ]\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level5;","import Obstacle from './obstacle';\r\n\r\nexport const polyFromFunction = function(game, f, g, a, b, step, color, width){\r\n    let [t0, t1] = [a, a+ step];\r\n    let result = [];\r\n    while( t1 <= b + .01){\r\n        const obst = new Obstacle(game, f(t0), g(t0), f(t1), g(t1), color, width);\r\n        t0 += step;\r\n        t1 += step;\r\n        result.push(obst);\r\n    }\r\n    return result;\r\n}","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nimport StartButton from '../start_button';\r\nclass Level6 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 150 + 5 + 35, 190 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 150, 190, 35, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 700, 250, 35, \"orange\", 1.2), \r\n            // new StickyPlanet(game, 440, 200, 30, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 400, 390,  [sqrt,-sqrt], 100);\r\n        const ellipse1 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), -Math.PI/4 + .5, Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse1).concat(ellipse2);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level6;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level7 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 185, 260 - 12 - 5 + 90 );\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 185, 260 + 90, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [0, -1],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 650, 290 + 90, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 500, 340 + 90, 35, \"orange\", 1.2),\r\n            // new StickyPlanet(game, 660, 430, 30, \"orange\", 1.2),\r\n            \r\n        ]\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 535, 270 + 90,  [-1, 0], 100);\r\n        const ellipse = polyFromFunction(game,\r\n            t => 530 +  (26)* t * Math.sin(t), t => 330 + 90+ 27 * t* Math.cos(t), 3.5, 17, Math.PI/100);\r\n        this.obstacles = [\r\n        ]\r\n\r\n        this.obstacles.push(...ellipse);\r\n        this.viewportZoom = .75;\r\n        this.viewportX2=1500;\r\n        this.viewportY2=750;\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 1200;\r\n        }\r\n}\r\n\r\nexport default Level7;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport BouncyPlanet from '../bouncy_planet';\r\nimport Hole from '../hole';\r\nclass Level8 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 350 + (12 + 5)*invSqrt, 120 + (12 + 5)*invSqrt);\r\n        this.corners = [[-500, -500], [3400, 3100]];\r\n        this.currentPlanet = new StickyPlanet(game, 350, 120, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [invSqrt, invSqrt],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 1050, 300, 20, \"orange\", 1.2), \r\n            new StickyPlanet(game, 820, 300, 45, \"orange\", 3),\r\n            new StickyPlanet(game, 500, 230, 50, \"orange\", .2),\r\n            // new StickyPlanet(game, 520, 280, 40, \"orange\", 1),\r\n            new StickyPlanet(game, 500, 310, 15, \"orange\", 10),\r\n            \r\n        ]\r\n        // const ellipse1 = polyFromFunction(game,\r\n        //     t => 500+ 300* Math.sin(t), t => 290 + 120* Math.cos(t), - .78 * Math.PI, -.4*Math.PI, Math.PI/100);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 800+ 300* Math.sin(t), t => 300 + 120* Math.cos(t), -0, 1.01 * Math.PI, Math.PI/100);\r\n        this.obstacles = [\r\n        ].concat(ellipse2);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 1050, 300,  [-1, 0], 100);\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level8;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport Hole from '../hole';\r\nclass Level9 {\r\n    constructor(game){\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 550 +12+5, 120 );\r\n        this.corners = [[-55500, -222500], [2225400, 2225100]];\r\n        this.currentPlanet = new StickyPlanet(game, 550, 120, 12, \"#27753a\", 1, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, this.ball.x, this.ball.y, [1, 0],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            new StickyPlanet(game, 1120, 1200, 750, \"orange\", .005)            \r\n        ]\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 50 + 400* Math.cos(t), t => 400 - 250* Math.sin(t), -.9,    Math.PI, Math.PI/60);\r\n        this.obstacles = [\r\n        ].concat(ellipse2);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 30, 430,  [0, -1], 480);\r\n        this.viewportStyle = 'centered';\r\n        this.viewportMovementStartX = 700;\r\n        this.viewportMovementStartY = 500;\r\n        }\r\n}\r\n\r\nexport default Level9;","import Ball from '../ball';\r\nimport LaunchPad from '../launchpad';\r\nimport StickyPlanet from '../Sticky_planet';\r\nimport Obstacle from '../obstacle';\r\nimport {polyFromFunction} from '../obstacles';\r\nimport Hole from '../hole';\r\nclass TitleLevel {\r\n    constructor(game){\r\n        this.splash = true;\r\n        const invSqrt = 1/Math.sqrt(2);\r\n        this.ball = new Ball(game, 812, 190 );\r\n        this.ball.stopped = false;\r\n        this.ball.vx = -1.6;\r\n        this.ball.vy = 3.1;\r\n        this.ball.winHandler = this.winHandler.bind(this.ball);\r\n        this.viewportStyle = \"stopped\";\r\n        this.corners = [[-55500, -222500], [2225400, 2225100]];\r\n        this.currentPlanet = new StickyPlanet(game, -1000, 120, 12, \"black\", .0001, Math.PI/2);\r\n        // this.startButton = new StartButton(game, 400, 400);\r\n        this.launchPad = new LaunchPad(game, -1000, this.ball.y, [0, 1],\r\n            Math.PI/2);\r\n        this.planets = [\r\n            this.currentPlanet,\r\n            // new StickyPlanet(game, 500, 175, 12, \"#27753a\", 25, Math.PI/2)\r\n\r\n        ]\r\n        const ellipse1 = polyFromFunction(game,\r\n            t => 790 + 34* Math.cos(t), t => 155 + 48* Math.sin(t), .55,    1.75*Math.PI, Math.PI/60,\r\n            \"orange\", 2);\r\n        const ellipse2 = polyFromFunction(game,\r\n            t => 910 + 45* Math.cos(t), t => 155 + 59* Math.sin(t), .5,    1.8*Math.PI, Math.PI/60,\r\n            \"orange\", 25);\r\n\r\n        this.obstacles = [\r\n        ].concat(ellipse1);\r\n        let sqrt = 1/Math.sqrt(2);\r\n        this.hole = new Hole(game, 860, 222,  [0, -1], 100);\r\n        }\r\n        winHandler(){\r\n        // this.stop();\r\n        const game = this.game;\r\n        game.titleSequenceController.winHandler();\r\n                \r\n    }\r\n\r\n}\r\n\r\nexport default TitleLevel;","import TitleLevel from './levels/titleLevel';\r\nclass TitleSequence {\r\n    constructor(game) {\r\n        this.game = game;\r\n        this.start = this.start.bind(this);\r\n        this.textRGB = [75, 45, 0];\r\n        this.phase = 0;\r\n        this.starRGB = [0, 0, 0];\r\n        this.startGamePlay = this.startGamePlay.bind(this);\r\n    }\r\n    start() {\r\n        const game = this.game;\r\n        game.initiateLevel(TitleLevel);\r\n        requestAnimationFrame(this.game.animate);\r\n    }\r\n\r\n    draw(ctx) {\r\n        this.startGamePlay();\r\n        if (this.phase === 1) {\r\n            let currentColor = this.textRGB.slice();\r\n            const newRed = Math.min(255, currentColor[0] + 2);\r\n            this.textRGB = [newRed, Math.floor(newRed * 165 / 255), 0];\r\n            let brightness = this.starRGB[0];\r\n            let newBrightness = Math.min(brightness + 2, 255);\r\n            this.starRGB = [newBrightness, newBrightness, newBrightness];\r\n        }\r\n        ctx.fillStyle =\r\n            `rgb(${this.textRGB[0]},${this.textRGB[1]},${this.textRGB[2]})`;\r\n        ctx.font = `bold 180px Arial`;\r\n        if (this.phase >= 1) {\r\n            ctx.font = `bold 180px Arial`;\r\n            ctx.fillText(\"SPACE\", 365, 220);\r\n        }\r\n        ctx.fillText(\"GOLF\", 380, 400);\r\n        if (this.starRGB[0] >= 255) {\r\n            if (this.phase === 1) {\r\n                document.body.addEventListener(\"click\",\r\n                    this.startGamePlay)\r\n                this.phase = 2;\r\n            }\r\n            ctx.fillStyle = \"white\";\r\n            ctx.font = `26px Arial`;\r\n            ctx.fillText(\"Click anywhere to start\", 450, 500);\r\n\r\n        }\r\n    }\r\n\r\n    startGamePlay() {\r\n        this.game.initiateLevel();\r\n        this.game.titleSequenceController = null;\r\n        document.body.removeEventListener(\"click\",\r\n            this.startGamePlay);\r\n    }\r\n\r\n    drawStars(ctx) {\r\n        const rgb = this.starRGB;\r\n        const colorStr = `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;\r\n        this.game.stars.draw(ctx, colorStr);\r\n\r\n    }\r\n\r\n    winHandler() {\r\n        this.phase = 1;\r\n        const game = this.game;\r\n    }\r\n}\r\n\r\nexport default TitleSequence;","class Viewport {\r\n    constructor(level, x1 = 0, y1 = 0, x2 = 1200 + x1, y2 = 600 + y1, zoom = 1) {\r\n        this.x1 = level.viewportX1 || x1;\r\n        this.y1 = level.viewportY1 || y1;\r\n        this.x2 = level.viewportX2 || x2;\r\n        this.y2 = level.viewportY2 || y2;\r\n        this.zoom = level.viewportZoom || zoom;\r\n        this.setMovementStart = this.setMovementStartPoints.bind(this);\r\n        this.moveWithBall = this.moveWithBall.bind(this);\r\n        this.style = level.viewportStyle;\r\n\r\n    }\r\n    setMovementStartPoints(up, right, down, left) {\r\n        this.startUp = up || 0;\r\n        this.startRight = right || 1100;\r\n        this.startDown = down || 530;\r\n        this.startLeft = left || 0;\r\n    }\r\n    moveWithBall(ballX, ballY, ball) {\r\n        if (this.style === \"stopped\") { return; }\r\n        if (this.style === 'centered') { return this.moveCentered(ballX, ballY); }\r\n        let { x1, x2, y1, y2 } = this;\r\n        let ballOvershoot = { x: ballX - .5 * (x1 + x2), y: ballY - .5 * (y1 + y2) };\r\n        if (\r\n            ballX > this.startRight || ballX < this.startLeft) {\r\n            const catchupX =\r\n                Math.abs(ballOvershoot.x) < Math.abs(1.4 * ball.vx) ?\r\n                    ballOvershoot.x : 1.4 * ball.vx;\r\n            this.x1 += catchupX;\r\n            this.x2 += catchupX;\r\n        }\r\n        if (\r\n            // ballOvershoot.y  > 0 && \r\n            ballY > this.startDown || ballY < this.startUp\r\n        ) {\r\n            const catchupY = Math.abs(ballOvershoot.y) < Math.abs(1.4 * ball.vy) ?\r\n                ballOvershoot.y : 1.4 * ball.vy;\r\n            this.y1 += catchupY;\r\n            this.y2 += catchupY;\r\n        }\r\n    }\r\n\r\n    moveCentered(ballX, ballY) {\r\n        this.x1 = ballX - 600  / this.zoom;\r\n        this.x2 = ballX + 600  / this.zoom;\r\n        this.y1 = ballY - 300  / this.zoom;\r\n        this.y2 = ballY + 300  / this.zoom;\r\n    }\r\n\r\n    displayPos(pojo) {\r\n        return { x: pojo.x - this.x1, y: pojo.y - this.y1 }\r\n    }\r\n}\r\n\r\nexport default Viewport;","import fastRandom from 'fast-random';\r\n\r\nclass Stars {\r\n    constructor(game, level, levelNum) {\r\n        this.topLeft = { x: level.corners[0] - 600, y: level.corners[0] - 300 };\r\n        this.bottomRight = { x: level.corners[1] + 600, y: level.corners[1] + 300 };\r\n        this.blocks = {};\r\n        this.starsPerBlock = 100;\r\n        this.levelNum = levelNum;\r\n        this.game = game;\r\n    }\r\n\r\n    generateBlock(xInThousands, yInThousands) {\r\n        let x = xInThousands;\r\n        let y = yInThousands;\r\n        const seed = 1000 * x + y + this.levelNum * 10000;\r\n        const frandom = fastRandom(seed);\r\n        const stars = new Array(this.starsPerBlock);\r\n        for (let i = 0; i < stars.length; i++) {\r\n            stars[i] = [\r\n                1000 * (x + frandom.nextFloat()),\r\n                1000 * (y + frandom.nextFloat()),\r\n                .3 + .8 * (frandom.nextFloat()) ** 9]\r\n        }\r\n        this.blocks[`${x}, ${y}`] = stars;\r\n    }\r\n\r\n    drawBlock(ctx, xInThousands, yInThousands, vp, color = \"white\") {\r\n        let stars = this.blocks[`${xInThousands}, ${yInThousands}`];\r\n        ctx.fillStyle = color;\r\n        for (let i = 0; i < stars.length; i++) {\r\n            let [x, y, r] = stars[i];\r\n            ctx.beginPath();\r\n\r\n            ctx.arc(\r\n                (x - vp.x1)*vp.zoom, (y - vp.y1)*vp.zoom, r*vp.zoom, 0, 2 * Math.PI, true\r\n            );\r\n            ctx.fill();\r\n        }\r\n    }\r\n\r\n    getBlock(x, y) {\r\n        return this.blocks[`${x}, ${y}`];\r\n    }\r\n\r\n    draw(ctx, color) {\r\n        let vp = this.game.vp;\r\n        for (let i = Math.floor(vp.x1 / 1000); i <= Math.ceil(vp.x2 / 1000); i++) {\r\n            for (let j = Math.floor(vp.y1 / 1000); j <= Math.ceil(vp.y2 / 1000); j++) {\r\n                if (!this.getBlock(i, j)) {\r\n                    this.generateBlock(i, j)\r\n                }\r\n                this.drawBlock(ctx, i, j, vp, color);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Stars;","import StartButton from \"./start_button\";\r\n\r\nclass Menu {\r\n    constructor(game) {\r\n        this.color = '#e8e4da';\r\n        this.game = game;\r\n        this.startButton = new StartButton(game, 500, 350);\r\n    }\r\n\r\n    draw(ctx, x = 400, y = 100) {\r\n        ctx.fillStyle = this.color;\r\n        ctx.beginPath();\r\n        ctx.rect(\r\n            x, y, x + 200, y + 250\r\n        );\r\n        ctx.stroke();\r\n        ctx.fill();\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"black\";\r\n        ctx.font = `${18}px Arial`;\r\n        ctx.fillText(`Use mouse or arrow keys to select launch direction. Click to launch.`,\r\n            x + 30, y + 40);\r\n        ctx.fillText(`Use 's' or 'f' for slower or faster playspeed, and 'p' to pause.`,\r\n            x + 30, y + 80);\r\n        ctx.fillText(`Pressing 'r' restarts the current level.`,\r\n            x + 30, y + 120);\r\n        ctx.fillText(`Press 'm' to return to this menu.`,\r\n            x + 30, y + 160);\r\n        ctx.fill();\r\n        this.startButton.draw(ctx);\r\n    }\r\n}\r\n\r\nexport default Menu;","class LevelDisplay{\r\n    constructor(level, x, y, scale){\r\n        this.level = level;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.scale = scale;\r\n        this.vp= {x1: -x/scale, y1: -y/scale, x2: x + scale*1200, y2: y +scale* 600,\r\n        zoom: scale};\r\n    }\r\n\r\n    draw(ctx){\r\n        const {obstacles, ball, planets, hole} = this.level;\r\n        const orbs = [ball].concat(planets);\r\n        orbs.forEach(orb => {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = orb.color;\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          this.scale*orb.x+this.x, \r\n          this.scale*orb.y + this.y, \r\n          this.scale*orb.radius, \r\n          0, 2 * Math.PI, true\r\n        );\r\n        ctx.fill();\r\n        }\r\n        );\r\n        ctx.setLineDash([]);\r\n        obstacles.forEach(obst => {\r\n            if (obst.y1 <0 || obst.y2 <0 || obst.x1<0 || obst.x2 < 0){return;}\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.scale * obst.x1 + this.x, this.scale * obst.y1 + this.y);\r\n        ctx.lineTo(this.scale * obst.x2 + this.x, this.scale * obst.y2 + this.y);\r\n        ctx.strokeStyle = obst.color;\r\n        ctx.stroke();\r\n        })\r\n        hole.drawFlag(ctx, this.vp);\r\n        hole.drawHoleWithBound(ctx, this.vp, this.x);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LevelDisplay;","import LevelDisplay from './level_display';\r\nconst error = () => {let m = document.getElementById(\"game-canvas\");\r\nlet rect = m.getBoundingClientRect();\r\nreturn {x: rect.x, y: rect.y};\r\n}\r\n\r\nclass LevelMenu {\r\n    constructor(game){\r\n        this.game = game;\r\n        const levels = game.levels.slice(1);\r\n        const perSide = Math.ceil(Math.sqrt(levels.length));\r\n        this.perSide = perSide;\r\n        this.draw = this.draw.bind(this);\r\n        this.installEventListener = this.installEventListener.bind(this);\r\n        this.removeEventListener = this.removeEventListener.bind(this);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n        const scale = 1/perSide;\r\n        this.levelDisplays = levels.map((lvl, idx)=>{\r\n            return (new LevelDisplay(\r\n                new lvl(game),\r\n          (idx % perSide) * 1200/perSide,  \r\n         600 *scale* Math.floor(idx/perSide), scale\r\n         )\r\n         );}\r\n        )\r\n    }\r\n\r\n    installEventListener(){\r\n        this.game.canvas.addEventListener(\r\n            \"click\", this.clickHandler\r\n        )\r\n    }\r\n\r\n    clickHandler(event){\r\n        const perSide = this.perSide;\r\n        const cursor = {x: event.clientX -error().x, y: event.clientY - error().y};\r\n        const i = Math.floor(perSide * cursor.x/1200);\r\n        const j = Math.floor(perSide * cursor.y/600);\r\n        const levelNumber = 1 + i + j * perSide;\r\n        this.game.currentLevelNumber = levelNumber - 1;\r\n        this.game.animating = true;\r\n        this.game.animate();\r\n        this.game.initiateLevel();\r\n        this.removeEventListener();\r\n    }\r\n\r\n    removeEventListener(){\r\n        this.game.canvas.removeEventListener(\r\n            \"click\", this.clickHandler\r\n        )\r\n    }\r\n\r\n    draw(ctx){\r\n        ctx.strokeStyle = 'white';\r\n        const perSide = this.perSide;\r\n        for (let i=0; i<=perSide; i++){\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, i*600/perSide);\r\n            ctx.lineTo(1200, i*600/perSide);\r\n            ctx.stroke();\r\n            ctx.beginPath();\r\n            ctx.moveTo(i*1200/perSide, 0);\r\n            ctx.lineTo(i*1200/perSide, 600);\r\n            ctx.stroke();\r\n        }\r\n        this.levelDisplays.forEach(ld=>ld.draw(ctx));\r\n    }\r\n}    \r\n\r\nexport default LevelMenu;\r\n","import Level1 from './levels/level1';\r\nimport Level2 from './levels/level2';\r\nimport Level3 from './levels/level3';\r\nimport Level4 from './levels/level4';\r\nimport Level5 from './levels/level5';\r\nimport Level6 from './levels/level6';\r\nimport Level7 from './levels/level7';\r\nimport Level8 from './levels/level8';\r\nimport Level9 from './levels/level9';\r\nimport TitleSequence from './titleSequence';\r\nimport TimedMessage from './timedMessage';\r\nimport Viewport from './viewport';\r\nimport Stars from './stars';\r\nimport Menu from './menu';\r\nimport LevelMenu from './level_menu/level_menu';\r\n\r\nclass Game {\r\n\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"game-canvas\");\r\n        this.canvas.setAttribute(\"tabindex\", 0);\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.animating = true;\r\n        this.levels = [null,\r\n            Level1,\r\n            Level2,\r\n            Level3,\r\n            Level4,\r\n            Level5,\r\n            Level6,\r\n            Level7,\r\n            Level8,\r\n            Level9\r\n        ];\r\n        // this.menu = new Menu(this);\r\n        this.currentLevelNumber = 0;\r\n        this.draw = this.draw.bind(this);\r\n        this.initiateLevel = this.initiateLevel.bind(this);\r\n        this.setupLaunchPad = this.setupLaunchPad.bind(this);\r\n        this.playSpeed = { num: 1, fractional: false };\r\n        this.setPlaySpeed = this.setPlaySpeed.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.frameCount = 0;\r\n        this.vp = new Viewport({});\r\n        this.restartLevel = this.restartLevel.bind(this);\r\n        this.levelControl = this.levelControl.bind(this);\r\n        this.displayKeyCommands = this.displayKeyCommands.bind(this);\r\n        this.switchToLevelMenu = this.switchToLevelMenu.bind(this);\r\n        this.timedMessages = [];\r\n        this.canvas.addEventListener(\"keydown\", this.levelControl);\r\n        window.printo = () => {\r\n            let ball = this.ball;\r\n            console.log(`name: ${parseInt(window.name) ** 2}, ballx: ${ball.x}, bpx: ${ball.prevx}, \r\n            balldrawX: ${ball.drawX}, ballInterX: ${ball.interpolateX}\r\n            viewportx1: ${this.vp.x1} viewporty1: ${this.vp.y1}`\r\n            )\r\n        }\r\n        // requestAnimationFrame(this.animate.bind(this));\r\n        this.menuReady();\r\n        this.titleSequenceController = new TitleSequence(this);\r\n    }\r\n\r\n    start() {\r\n        this.titleSequenceController.start();\r\n    }\r\n\r\n    levelControl(event) {\r\n        console.log(event.keyCode);\r\n        if (event.keyCode === 82) this.restartLevel();\r\n        if (event.keyCode === 76) this.switchToLevelMenu();\r\n    }\r\n\r\n    switchToLevelMenu() {\r\n        const levelMenu = new LevelMenu(this);\r\n        const { ctx, canvas } = this;\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.fillStyle = \"black\";\r\n        this.animating = false;\r\n        ctx.clearRect(0, 0, 1200, 600);\r\n        levelMenu.draw(this.ctx);\r\n        levelMenu.installEventListener();\r\n    }\r\n\r\n    initiateLevel(levelClass) {\r\n        this.won = false;\r\n        if (!levelClass) {\r\n            this.currentLevelNumber += 1;\r\n            levelClass = this.levels[this.currentLevelNumber];\r\n        }\r\n\r\n        const level = new levelClass(this);\r\n        this.level = level;\r\n        this.vp = new Viewport(level);\r\n        this.ball = level.ball;\r\n        this.currentPlanet = level.currentPlanet;\r\n        this.launchPad = level.launchPad;\r\n        this.planets = level.planets || [];\r\n        this.hole = level.hole;\r\n        this.obstacles = level.obstacles || [];\r\n        this.corners = level.corners;\r\n        this.stars = new Stars(this, level, this.currentLevelNumber);\r\n        this.stars.generateBlock(0, 0);\r\n        this.vp.setMovementStartPoints(\r\n            level.viewportMovementUp,\r\n            level.viewportMovementRight,\r\n            level.viewportMovementDown,\r\n            level.viewportMovementLeft);\r\n\r\n        this.canvas.addEventListener(\"keydown\", this.setPlaySpeed, false);\r\n\r\n        if (!this.menu) { this.setupLaunchPad(); }\r\n    }\r\n\r\n    restartLevel() {\r\n        this.currentLevelNumber -= 1;\r\n        this.initiateLevel();\r\n    }\r\n\r\n    zoomIn() {\r\n        let vp = this.game.vp;\r\n        if(vp.zoom >= 2) {return;}\r\n        vp.zoom += .1;\r\n        vp.x1 = 600 \r\n    }\r\n    setPlaySpeed(event) {\r\n        if (![70, 83].includes(event.keyCode)) return;\r\n        if (event.keyCode === 70) {\r\n            if (this.playSpeed.fractional) {\r\n                if ([2, 3, 4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -= 1;\r\n                }\r\n                else if (this.playSpeed.num === 1) {\r\n                    this.playSpeed.fractional = false;\r\n                    this.playSpeed.num = 2;\r\n                }\r\n            }\r\n            else {\r\n                if ([1, 2, 3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n                }\r\n            }\r\n        }\r\n        if (event.keyCode === 83) {\r\n            if (this.playSpeed.fractional) {\r\n                if ([1, 2, 3].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num += 1;\r\n                }\r\n            }\r\n            else {\r\n                if ([2, 3, 4].includes(this.playSpeed.num)) {\r\n                    this.playSpeed.num -= 1;\r\n                }\r\n                else if (this.playSpeed.num === 1) {\r\n                    this.playSpeed.fractional = true;\r\n                    this.playSpeed.num = 2;\r\n                }\r\n            }\r\n        }\r\n        this.timedMessages = [new TimedMessage(\r\n            `Playspeed: ${this.playSpeed.fractional ?\r\n                (1 / this.playSpeed.num).toFixed(2) : this.playSpeed.num}`)];\r\n    }\r\n\r\n    victoryMessage() {\r\n        const ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `${30}px Arial`;\r\n        ctx.fillText('You win!',\r\n            400, 400);\r\n        ctx.fill();\r\n    }\r\n\r\n\r\n\r\n    setupLaunchPad() {\r\n        let game = this;\r\n        let canvas = game.canvas;\r\n        let setVelocityWithMouse = e => this.launchPad.setVelocity(e);\r\n        let launchBallWithMouse = e => {\r\n            if (this.launchPad.launch()) {\r\n                canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n                canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n                canvas.removeEventListener(\"keydown\", keyDownHandler, false);\r\n                this.launchPad = null;\r\n            }\r\n        }\r\n        let arrowCodes = [37, 38, 39, 40];\r\n        let keyDownHandler = e => {\r\n            if (arrowCodes.includes(e.keyCode)) {\r\n                canvas.removeEventListener('mousemove', setVelocityWithMouse, false);\r\n            }\r\n            game.launchPad.setVelocityByArrowKeys(e, () => {\r\n                canvas.removeEventListener('keydown', keyDownHandler, false);\r\n                canvas.removeEventListener(\"click\", launchBallWithMouse, false);\r\n                this.launchPad = null;\r\n            });\r\n        }\r\n\r\n        this.setVelocityWithMouse = setVelocityWithMouse;\r\n        this.keyDownHandler = keyDownHandler;\r\n        this.launchBallWithMouse = launchBallWithMouse;\r\n        canvas.addEventListener(\"mousemove\", this.setVelocityWithMouse, false);\r\n        canvas.addEventListener('keydown', this.keyDownHandler, false);\r\n        canvas.addEventListener(\"click\", this.launchBallWithMouse, false);\r\n    }\r\n\r\n    disableLaunchPad() {\r\n        let canvas = this.canvas;\r\n        canvas.removeEventListener('keydown', this.keyDownHandler, false);\r\n        canvas.removeEventListener(\"click\", this.launchBallWithMouse, false);\r\n        canvas.removeEventListener('mousemove', this.setVelocityWithMouse, false);\r\n    }\r\n\r\n    menuReady() {\r\n        let canvas = this.canvas;\r\n        canvas.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 77) {\r\n                this.disableLaunchPad();\r\n                this.menu = new Menu(this)\r\n            }\r\n            if (e.keyCode === 80) {\r\n                if (this.animating) { this.animating = false; }\r\n                else {\r\n                    this.animating = true;\r\n                    requestAnimationFrame(this.animate.bind(this));\r\n                }\r\n            }\r\n        }\r\n            , false);\r\n    }\r\n\r\n\r\n    step(delta) {\r\n        this.moveObjects(delta);\r\n        this.vp.moveWithBall(this.ball.interpolateX, this.ball.interpolateY,\r\n            this.ball);\r\n        this.timedMessages.forEach(message => {\r\n            message.duration -= 1;\r\n        });\r\n        this.timedMessages = this.timedMessages.filter(message =>\r\n            (message.duration >= 0));\r\n    }\r\n\r\n    moveObjects() {\r\n        let { playSpeed } = this;\r\n        if (playSpeed.fractional) {\r\n            if (this.frameCount % playSpeed.num === 0) {\r\n                this.ball.move();\r\n                if (!this.ball.checkRectangle(this.corners)) {\r\n                    this.restartLevel();\r\n                    return;\r\n                }\r\n            }\r\n\r\n        }\r\n        else {\r\n            for (let i = 1; i <= playSpeed.num; i++) {\r\n                this.ball.move();\r\n                if (!this.ball.checkRectangle(this.corners)) {\r\n                    this.restartLevel();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(time) {\r\n        const timeDelta = time - this.lastTime;\r\n        this.step(timeDelta);\r\n        if (!this.animating) return;\r\n        this.draw();\r\n        this.lastTime = time;\r\n        this.frameCount += 1;\r\n\r\n        requestAnimationFrame(this.animate.bind(this));\r\n    }\r\n\r\n    displayKeyCommands() {\r\n        let ctx = this.ctx;\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"white\"\r\n        ctx.font = `15px Arial`;\r\n        ctx.fillText('r to restart', 1090, 510);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillText('p to pause', 1090, 525);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillText('l to select level', 1090, 540);\r\n        ctx.fill();\r\n\r\n        ctx.beginPath();\r\n        ctx.fillText('s/f: slow/fast', 1090, 555);\r\n        ctx.fill();\r\n    }\r\n\r\n\r\n    draw() {\r\n        let { ctx, ball, vp, launchPad, hole } = this;\r\n        // ctx.width = 1200;\r\n        // ctx.height = 600;\r\n        ctx.fillStyle = \"black\";\r\n        ctx.strokeStyle = \"black\";\r\n        ctx.clearRect(0, 0, 1200, 600);\r\n        this.displayKeyCommands();\r\n        if (this.stars) {\r\n            if (this.titleSequenceController) {\r\n                this.titleSequenceController.drawStars(ctx);\r\n            }\r\n            else this.stars.draw(ctx);\r\n        }\r\n        hole.drawFlag(ctx, vp);\r\n        hole.drawHole(ctx, vp);\r\n        this.obstacles.forEach(obstacle => obstacle.draw(ctx, vp));\r\n        ball.draw(ctx);\r\n        this.planets.forEach(planet =>\r\n            planet.draw(ctx, vp));\r\n        this.timedMessages.forEach(message => { message.draw(ctx); })\r\n        if (launchPad) { launchPad.draw(ctx, vp); }\r\n        if (this.won) this.victoryMessage();\r\n        if (!this.titleSequenceController) {\r\n            ctx.fillStyle = \"#3e78ad\";\r\n            ctx.font = `14px Arial`;\r\n            ctx.fillText(`Velocity_x=${this.ball.vx.toFixed(0)}, Velocity_y=${this.ball.vy.toFixed(0)},\r\n        speed = ${Math.sqrt(this.ball.vx ** 2 + this.ball.vy ** 2).toFixed(0)}`,\r\n                20,\r\n                550);\r\n            ctx.font = '16px Arial';\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillText(`Level ${this.currentLevelNumber}`,\r\n                20,\r\n                580);\r\n        }\r\n        if (this.menu) this.menu.draw(ctx);\r\n        if (this.titleSequenceController) {\r\n            this.titleSequenceController.draw(ctx);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Game;","import Game from './game';\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    const game = new Game();\r\n    game.start();\r\n});\r\n"],"sourceRoot":""}